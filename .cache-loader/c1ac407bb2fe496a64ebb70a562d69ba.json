{"remainingRequest":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/data/competition/actionCreators.ts","dependencies":[{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/data/competition/actionCreators.ts","mtime":1532677259159},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import actionTypes from \"./actionTypes\";\n// this will be called when you start a request\nexport const competitionFetchRequested = () => ({\n    type: actionTypes.COMPETITION_FETCH_REQUESTED,\n});\n// this will be called when you get the data back\nexport const competitionFetchFulfilled = (competitions) => ({\n    type: actionTypes.COMPETITION_FETCH_FULFILLED,\n    payload: competitions,\n});\n// this will be called when you got some errors\nexport const competitionFetchRejected = (error) => ({\n    type: actionTypes.COMPETITION_FETCH_REJECTED,\n    payload: error,\n    error: true,\n});\nexport default {\n    competitionFetchFulfilled,\n    competitionFetchRequested,\n    competitionFetchRejected,\n};\n",{"version":3,"file":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/data/competition/actionCreators.ts","sourceRoot":"","sources":["/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/data/competition/actionCreators.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,eAAe,CAAC;AA0BxC,+CAA+C;AAC/C,MAAM,CAAC,MAAM,yBAAyB,GAAG,GAAG,EAAE,CAAC,CAAC;IAC5C,IAAI,EAAE,WAAW,CAAC,2BAA2B;CAChD,CAAC,CAAC;AACH,iDAAiD;AACjD,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,YAAkC,EAAE,EAAE,CAAC,CAAC;IAC9E,IAAI,EAAE,WAAW,CAAC,2BAA2B;IAC7C,OAAO,EAAE,YAAY;CACxB,CAAC,CAAC;AACH,+CAA+C;AAC/C,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC;IACrD,IAAI,EAAE,WAAW,CAAC,0BAA0B;IAC5C,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,IAAI;CACd,CAAC,CAAC;AAEH,eAAe;IACX,yBAAyB;IACzB,yBAAyB;IACzB,wBAAwB;CAC3B,CAAC","sourcesContent":["import actionTypes from \"./actionTypes\";\n// define action\nexport interface InformationType {\n    statisticDto: StatisticType;\n    profileDto: ProfileType;\n}\nexport interface StatisticType {\n    runningDisTotal: number;\n    cyclingDisTotal: number;\n    gymTimeTotal: number;\n    climbingTimeTotal: number;\n    hikingTimeTotal: number;\n    meditationTimeTotal: number;\n    skatingTimeTotal: number;\n    swimmingTimeTotal: number;\n    yogaTimeTotal: number;\n}\nexport interface ProfileType {\n    fullName: string;\n    imageLink: string;\n}\nexport interface CompetitionInterface {\n    competitionId: string;\n    host: InformationType;\n    invitee: InformationType;\n}\n// this will be called when you start a request\nexport const competitionFetchRequested = () => ({\n    type: actionTypes.COMPETITION_FETCH_REQUESTED,\n});\n// this will be called when you get the data back\nexport const competitionFetchFulfilled = (competitions: CompetitionInterface) => ({\n    type: actionTypes.COMPETITION_FETCH_FULFILLED,\n    payload: competitions,\n});\n// this will be called when you got some errors\nexport const competitionFetchRejected = (error: any) => ({\n    type: actionTypes.COMPETITION_FETCH_REJECTED,\n    payload: error,\n    error: true,\n});\n\nexport default {\n    competitionFetchFulfilled,\n    competitionFetchRequested,\n    competitionFetchRejected,\n};\n"]}]}