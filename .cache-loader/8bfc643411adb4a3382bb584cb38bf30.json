{"remainingRequest":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/components/textField/autocomplete-text-field.tsx","dependencies":[{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/components/textField/autocomplete-text-field.tsx","mtime":1532677259157},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Paper, MenuItem } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport axios from \"~/common/axiosConfigure\";\nimport { TextFieldId } from \"~/containers/activity/ActivityForm\";\nconst Autosuggest = require(\"react-autosuggest\");\nclass AutocompleteTextField extends React.Component {\n    constructor(props) {\n        super(props);\n        // Imagine you have a list of languages that you'd like to autosuggest.\n        this.locations = [];\n        // Teach Autosuggest how to calculate suggestions for any given input value.\n        this.getSuggestions = (value) => {\n            const inputValue = value.trim().toLowerCase();\n            const inputLength = inputValue.length;\n            let i = 1;\n            return inputLength === 0\n                ? []\n                : this.locations.filter(location => {\n                    if (i > 5)\n                        return false;\n                    if (location.toLocaleLowerCase().indexOf(inputValue) === 0) {\n                        i = i + 1;\n                        return true;\n                    }\n                    return false;\n                });\n        };\n        // When suggestion is clicked, Autosuggest needs to populate the input\n        // based on the clicked suggestion. Teach Autosuggest how to calculate the\n        // input value for every given suggestion.\n        this.getSuggestionValue = (suggestion) => {\n            this.props.inputProps.setClickedValue(TextFieldId.Location, suggestion);\n            return suggestion;\n        };\n        // Use your imagination to render suggestions.\n        this.renderSuggestion = (suggestion, { isHighlighted }) => (React.createElement(MenuItem, { selected: isHighlighted, component: \"div\", name: \"autocompleteSelection\" },\n            React.createElement(\"div\", null, suggestion)));\n        // Render Input Component\n        this.renderInput = (inputProps) => {\n            const { ref } = inputProps, other = tslib_1.__rest(inputProps, [\"ref\"]);\n            return (React.createElement(TextField, Object.assign({ fullWidth: true, inputRef: ref, InputProps: Object.assign({}, other) }, this.props.TextFieldProps)));\n        };\n        this.renderSuggestionsContainer = (options) => {\n            const { containerProps, children } = options;\n            return (React.createElement(Paper, Object.assign({}, containerProps, { square: true }), children));\n        };\n        // Autosuggest will call this function every time you need to update suggestions.\n        // You already implemented this logic above, so just use it.\n        this.onSuggestionsFetchRequested = ({ value }) => {\n            this.setState({\n                suggestions: this.getSuggestions(value),\n            });\n        };\n        // Autosuggest will call this function every time you need to clear suggestions.\n        this.onSuggestionsClearRequested = () => {\n            this.setState({\n                suggestions: [],\n            });\n        };\n        this.onSuggestionHighlighted = ({ suggestion }) => {\n            if (suggestion)\n                this.props.inputProps.value = suggestion;\n        };\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: [],\n        };\n    }\n    componentDidMount() {\n        axios\n            .get(`/activities/location/suggestion?accountId=${this.props.currentUser ? this.props.currentUser.accountId : \"1\"}`)\n            .then((response) => {\n            this.locations = response.data;\n        });\n    }\n    render() {\n        const { classes } = this.props;\n        // Finally, render it!\n        return (React.createElement(Autosuggest, { theme: classes && {\n                container: classes.container,\n                suggestionsContainerOpen: classes.suggestionsContainerOpen,\n                suggestionsList: classes.suggestionsList,\n                suggestion: classes.suggestion,\n            }, suggestions: this.state.suggestions, onSuggestionsFetchRequested: this.onSuggestionsFetchRequested, onSuggestionsClearRequested: this.onSuggestionsClearRequested, getSuggestionValue: this.getSuggestionValue, renderInputComponent: this.renderInput, renderSuggestion: this.renderSuggestion, renderSuggestionsContainer: this.renderSuggestionsContainer, onSuggestionHighlighted: this.onSuggestionHighlighted, inputProps: this.props.inputProps }));\n    }\n}\nconst styles = {\n    container: {\n        flexGrow: 1,\n        position: \"relative\",\n    },\n    suggestionsContainerOpen: {\n        position: \"absolute\",\n        zIndex: 1,\n        left: 0,\n        right: 0,\n    },\n    suggestion: {\n        display: \"block\",\n    },\n    suggestionsList: {\n        margin: 0,\n        padding: 0,\n        listStyleType: \"none\",\n    },\n};\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state) => {\n    return {\n        currentUser: state.currentUser.currentUser,\n    };\n};\nexport default connect(mapStateToProps, null)(withStyles(styles)(AutocompleteTextField));\n",{"version":3,"file":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/components/textField/autocomplete-text-field.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/components/textField/autocomplete-text-field.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport { withStyles, WithStyles, StyleRules } from \"@material-ui/core/styles\";\nimport { Paper, MenuItem } from \"@material-ui/core\";\nimport { AxiosResponse } from \"axios\";\nimport { connect } from \"react-redux\";\nimport axios from \"~/common/axiosConfigure\";\nimport { TextFieldId } from \"~/containers/activity/ActivityForm\";\nconst Autosuggest = require(\"react-autosuggest\");\n\ninterface IAutocompleteState {\n    suggestions: string[];\n}\n\nexport interface IInputProps extends WithStyles<typeof styles> {\n    TextFieldProps: TextFieldProps;\n    inputProps: {\n        value: string;\n        onChange: (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n        setClickedValue: (field: string, value: string) => void;\n    };\n    currentUser: {\n        accountId: string;\n    };\n}\n\nclass AutocompleteTextField extends React.Component<IInputProps, IAutocompleteState> {\n    constructor(props: IInputProps) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: [],\n        };\n    }\n\n    componentDidMount() {\n        axios\n            .get(\n                `/activities/location/suggestion?accountId=${\n                    this.props.currentUser ? this.props.currentUser.accountId : \"1\"\n                }`,\n            )\n            .then((response: AxiosResponse<string[]>) => {\n                this.locations = response.data;\n            });\n    }\n    // Imagine you have a list of languages that you'd like to autosuggest.\n    private locations: string[] = [];\n\n    // Teach Autosuggest how to calculate suggestions for any given input value.\n    private getSuggestions = (value: string): string[] => {\n        const inputValue = value.trim().toLowerCase();\n        const inputLength = inputValue.length;\n        let i = 1;\n        return inputLength === 0\n            ? []\n            : this.locations.filter(location => {\n                  if (i > 5) return false;\n                  if (location.toLocaleLowerCase().indexOf(inputValue) === 0) {\n                      i = i + 1;\n                      return true;\n                  }\n                  return false;\n              });\n    };\n\n    // When suggestion is clicked, Autosuggest needs to populate the input\n    // based on the clicked suggestion. Teach Autosuggest how to calculate the\n    // input value for every given suggestion.\n    private getSuggestionValue = (suggestion: string): string => {\n        this.props.inputProps.setClickedValue(TextFieldId.Location, suggestion);\n        return suggestion;\n    };\n\n    // Use your imagination to render suggestions.\n    private renderSuggestion = (\n        suggestion: string,\n        { isHighlighted }: { isHighlighted: boolean },\n    ): JSX.Element => (\n        <MenuItem selected={isHighlighted} component=\"div\" name=\"autocompleteSelection\">\n            <div>{suggestion}</div>\n        </MenuItem>\n    );\n\n    // Render Input Component\n    private renderInput = (inputProps: any): JSX.Element => {\n        const { ref, ...other } = inputProps;\n        return (\n            <TextField\n                fullWidth\n                inputRef={ref}\n                InputProps={{\n                    ...other,\n                }}\n                {...this.props.TextFieldProps}\n            />\n        );\n    };\n\n    private renderSuggestionsContainer = (options: any): JSX.Element => {\n        const { containerProps, children } = options;\n\n        return (\n            <Paper {...containerProps} square>\n                {children}\n            </Paper>\n        );\n    };\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    private onSuggestionsFetchRequested = ({ value }: { value: string }): void => {\n        this.setState({\n            suggestions: this.getSuggestions(value),\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    private onSuggestionsClearRequested = (): void => {\n        this.setState({\n            suggestions: [],\n        });\n    };\n    private onSuggestionHighlighted = ({ suggestion }: { suggestion: string }): void => {\n        if (suggestion) this.props.inputProps.value = suggestion;\n    };\n    public render(): React.ReactNode {\n        const { classes } = this.props;\n        // Finally, render it!\n        return (\n            <Autosuggest\n                theme={\n                    classes && {\n                        container: classes.container,\n                        suggestionsContainerOpen: classes.suggestionsContainerOpen,\n                        suggestionsList: classes.suggestionsList,\n                        suggestion: classes.suggestion,\n                    }\n                }\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={this.getSuggestionValue}\n                renderInputComponent={this.renderInput}\n                renderSuggestion={this.renderSuggestion}\n                renderSuggestionsContainer={this.renderSuggestionsContainer}\n                onSuggestionHighlighted={this.onSuggestionHighlighted}\n                inputProps={this.props.inputProps}\n            />\n        );\n    }\n}\n\ntype styleClassNames = \"suggestionsContainerOpen\" | \"suggestion\" | \"suggestionsList\" | \"container\";\n\nconst styles: StyleRules<styleClassNames> = {\n    container: {\n        flexGrow: 1,\n        position: \"relative\",\n    },\n    suggestionsContainerOpen: {\n        position: \"absolute\",\n        zIndex: 1,\n        left: 0,\n        right: 0,\n    },\n    suggestion: {\n        display: \"block\",\n    },\n    suggestionsList: {\n        margin: 0,\n        padding: 0,\n        listStyleType: \"none\",\n    },\n};\n\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state: any) => {\n    return {\n        currentUser: state.currentUser.currentUser,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    null,\n)(withStyles(styles)(AutocompleteTextField));\n"]}]}