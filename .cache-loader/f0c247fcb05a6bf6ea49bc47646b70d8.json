{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/pages/competition/CompetitionList.tsx","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/pages/competition/CompetitionList.tsx","mtime":1532681924903},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport CompetitionCard from \"~/pages/competition/CompetitionCard\";\nimport { competitionActions } from \"~/data/competition\";\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport FloatingAddButton from \"~/containers/AddTeam/FloatingAddButton\";\nimport AddUserDialog from \"~/containers/competition/AddUserDialog\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport CircularProgress from \"@material-ui/core/es/CircularProgress/CircularProgress\";\nclass CompetitionList extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isOpen: false,\n        };\n        this.handleClickOpen = () => {\n            this.setState({ isOpen: true });\n        };\n        this.handleClose = () => {\n            this.setState({ isOpen: false });\n        };\n    }\n    componentDidMount() {\n        if (this.props.currentUser) {\n            this.props.fetchCompetitions(this.props.currentUser.accountId);\n        }\n    }\n    componentDidUpdate(nextProps) {\n        if (JSON.stringify(this.props.listCompetitions) !==\n            JSON.stringify(nextProps.listCompetitions) ||\n            this.props.currentUser !== nextProps.currentUser) {\n            this.props.fetchCompetitions(this.props.currentUser.accountId);\n        }\n    }\n    render() {\n        let listCompetition = null;\n        if (!this.props.currentUser) {\n            listCompetition = React.createElement(\"div\", null);\n        }\n        else {\n            if (this.props.listCompetitions === null) {\n                return React.createElement(CircularProgress, { size: 50, style: { marginLeft: \"48%\" } });\n            }\n            if (this.props.listCompetitions.length === 0) {\n                listCompetition = (React.createElement(Typography, { style: {\n                        textAlign: \"center\",\n                        fontWeight: \"bold\",\n                        color: \"#015C7F\",\n                        fontSize: \"larger\",\n                    }, component: \"h1\" },\n                    \"NO COMPETITIONS FOUND! \",\n                    React.createElement(\"br\", null),\n                    \" LET'S CREATE A NEW COMPETITION\"));\n            }\n            else {\n                listCompetition = (React.createElement(Grid, { container: true, spacing: 40 }, this.props.listCompetitions.map((competition, index) => {\n                    return (React.createElement(Grid, { item: true, lg: 12, key: index, style: { width: \"100%\" } },\n                        React.createElement(CompetitionCard, { competitionId: competition.competitionId, host: competition.host, invitee: competition.invitee, refreshCompetitions: this.props.fetchCompetitions, userId: this.props.currentUser.accountId, inviteeId: competition.inviteeId })));\n                })));\n            }\n        }\n        return (React.createElement(\"div\", null,\n            listCompetition,\n            React.createElement(\"div\", null,\n                React.createElement(FloatingAddButton, { onClickAddTeamButton: this.handleClickOpen }),\n                React.createElement(AddUserDialog, { isOpen: this.state.isOpen, onClose: this.handleClose }))));\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        listCompetitions: state.competition.listCompetitions,\n        currentUser: state.currentUser.currentUser,\n    };\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchCompetitions: (userId) => {\n            dispatch(competitionActions.fetchCompetitions(userId));\n        },\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(CompetitionList);\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/pages/competition/CompetitionList.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/pages/competition/CompetitionList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as Redux from \"redux\";\nimport { connect } from \"react-redux\";\nimport CompetitionCard from \"~/pages/competition/CompetitionCard\";\nimport { competitionActions } from \"~/data/competition\";\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport { InformationType } from \"~/data/competition/actionCreators\";\nimport FloatingAddButton from \"~/containers/AddTeam/FloatingAddButton\";\nimport AddUserDialog from \"~/containers/competition/AddUserDialog\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport CircularProgress from \"@material-ui/core/es/CircularProgress/CircularProgress\";\n\ninterface CompetitionType {\n    competitionId: string;\n    host: InformationType;\n    invitee: InformationType;\n    inviteeId: string;\n}\n\ninterface CompetitionState {\n    competition: {\n        listCompetitions: CompetitionType[] | null;\n    };\n    currentUser: {\n        currentUser: {};\n    };\n}\n\ninterface ParticipantProps {\n    listCompetitions: CompetitionType[];\n    fetchCompetitions: Redux.ActionCreator<{}>;\n    currentUser: {\n        accountId: string;\n    };\n}\n\nclass CompetitionList extends React.Component<ParticipantProps, {}> {\n    state = {\n        isOpen: false,\n    };\n\n    private handleClickOpen = (): void => {\n        this.setState({ isOpen: true });\n    };\n\n    private handleClose = (): void => {\n        this.setState({ isOpen: false });\n    };\n    componentDidMount(): void {\n        if (this.props.currentUser) {\n            this.props.fetchCompetitions(this.props.currentUser.accountId);\n        }\n    }\n    componentDidUpdate(nextProps: ParticipantProps): void {\n        if (\n            JSON.stringify(this.props.listCompetitions) !==\n                JSON.stringify(nextProps.listCompetitions) ||\n            this.props.currentUser !== nextProps.currentUser\n        ) {\n            this.props.fetchCompetitions(this.props.currentUser.accountId);\n        }\n    }\n    render(): React.ReactNode {\n        let listCompetition = null;\n        if (!this.props.currentUser) {\n            listCompetition = <div />;\n        } else {\n            if (this.props.listCompetitions === null) {\n                return <CircularProgress size={50} style={{ marginLeft: \"48%\" }} />;\n            }\n            if (this.props.listCompetitions.length === 0) {\n                listCompetition = (\n                    <Typography\n                        style={{\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"#015C7F\",\n                            fontSize: \"larger\",\n                        }}\n                        component=\"h1\"\n                    >\n                        NO COMPETITIONS FOUND! <br /> LET'S CREATE A NEW COMPETITION\n                    </Typography>\n                );\n            } else {\n                listCompetition = (\n                    <Grid container spacing={40}>\n                        {this.props.listCompetitions.map((competition: CompetitionType, index) => {\n                            return (\n                                <Grid item lg={12} key={index} style={{ width: \"100%\" }}>\n                                    <CompetitionCard\n                                        competitionId={competition.competitionId}\n                                        host={competition.host}\n                                        invitee={competition.invitee}\n                                        refreshCompetitions={this.props.fetchCompetitions}\n                                        userId={this.props.currentUser.accountId}\n                                        inviteeId={competition.inviteeId}\n                                    />\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                );\n            }\n        }\n\n        return (\n            <div>\n                {listCompetition}\n                <div>\n                    <FloatingAddButton onClickAddTeamButton={this.handleClickOpen} />\n                    <AddUserDialog isOpen={this.state.isOpen} onClose={this.handleClose} />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: CompetitionState) => {\n    return {\n        listCompetitions: state.competition.listCompetitions,\n        currentUser: state.currentUser.currentUser,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        fetchCompetitions: (userId: string) => {\n            dispatch(competitionActions.fetchCompetitions(userId));\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(CompetitionList);\n"]}]}