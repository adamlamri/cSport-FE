{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/pages/team/TeamList.tsx","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/pages/team/TeamList.tsx","mtime":1532677259162},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { teamActions } from \"../../data/team/index\";\nimport CreatedTeamCard from \"~/pages/team/CreatedTeamCard\";\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport AddTeamDialog from \"~/containers/AddTeam/AddTeamDialog\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport JoinedTeamCard from \"~/pages/team/JoinedTeamCard\";\nimport Typography from \"@material-ui/core/Typography\";\nclass TeamList extends React.Component {\n    // fetch user from server\n    componentDidMount() {\n        if (this.props.currentUser) {\n            this.props.fetchCreatedTeams(this.props.currentUser.accountId);\n            this.props.fetchJoinedTeams(this.props.currentUser.accountId);\n        }\n    }\n    componentDidUpdate(nextProps) {\n        if (JSON.stringify(this.props.teamListCreated) !==\n            JSON.stringify(nextProps.teamListCreated) ||\n            JSON.stringify(this.props.teamListJoined) !==\n                JSON.stringify(nextProps.teamListJoined) ||\n            this.props.currentUser !== nextProps.currentUser) {\n            this.props.fetchCreatedTeams(this.props.currentUser.accountId);\n            this.props.fetchJoinedTeams(this.props.currentUser.accountId);\n        }\n    }\n    render() {\n        let list = null;\n        if (!this.props.currentUser) {\n            return React.createElement(\"div\", null);\n        }\n        list = (React.createElement(\"div\", null,\n            React.createElement(ExpansionPanel, null,\n                React.createElement(ExpansionPanelSummary, { expandIcon: React.createElement(ExpandMoreIcon, null) },\n                    React.createElement(Typography, { style: {\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"#015C7F\",\n                        }, component: \"h1\" }, \"CREATED TEAMS\"),\n                    React.createElement(Typography, { style: {\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"#000000\",\n                            marginLeft: \"20px\",\n                        }, component: \"h4\" },\n                        this.props.teamListCreated.length,\n                        \" team(s) created.\")),\n                React.createElement(ExpansionPanelDetails, null,\n                    React.createElement(Grid, { container: true }, this.props.teamListCreated.map((team, index) => {\n                        return (React.createElement(Grid, { key: index, item: true, lg: 2, md: 4, sm: 6, xs: 12, style: { padding: \"10px\" } },\n                            React.createElement(CreatedTeamCard, { name: team.name, teamId: team.teamId, refreshTeams: this.props.fetchCreatedTeams, userId: this.props.currentUser.accountId })));\n                    })))),\n            React.createElement(ExpansionPanel, null,\n                React.createElement(ExpansionPanelSummary, { expandIcon: React.createElement(ExpandMoreIcon, null) },\n                    React.createElement(Typography, { style: {\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"#015C7F\",\n                        }, component: \"h1\" }, \"JOINED TEAMS\"),\n                    React.createElement(Typography, { style: {\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"#000000\",\n                            marginLeft: \"20px\",\n                        }, component: \"h4\" },\n                        this.props.teamListJoined.length,\n                        \" team(s) joined.\")),\n                React.createElement(ExpansionPanelDetails, null, React.createElement(Grid, { container: true }, this.props.teamListJoined.map((team, index) => {\n                    return (React.createElement(Grid, { key: index, item: true, lg: 2, md: 4, sm: 6, xs: 12, style: { padding: \"10px\" } },\n                        React.createElement(JoinedTeamCard, { name: team.name, teamId: team.teamId, refreshTeams: this.props.fetchJoinedTeams })));\n                }))))));\n        return (React.createElement(\"div\", null,\n            list,\n            React.createElement(AddTeamDialog, { refreshTeams: this.props.fetchCreatedTeams, userId: this.props.currentUser.accountId, handleDialogClosed: \"\", fullScreen: true })));\n    }\n}\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state) => {\n    return {\n        teamListCreated: state.team.listCreated,\n        teamListJoined: state.team.listJoined,\n        currentUser: state.currentUser.currentUser,\n    };\n};\n// map the action of redux to component prop\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchCreatedTeams: (userId) => {\n            dispatch(teamActions.fetchCreatedTeams(userId));\n        },\n        fetchJoinedTeams: (userId) => {\n            dispatch(teamActions.fetchJoinedTeams(userId));\n        },\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamList);\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/pages/team/TeamList.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/pages/team/TeamList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as Redux from \"redux\";\nimport { connect } from \"react-redux\";\nimport { teamActions } from \"../../data/team/index\";\nimport CreatedTeamCard from \"~/pages/team/CreatedTeamCard\";\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport AddTeamDialog from \"~/containers/AddTeam/AddTeamDialog\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport JoinedTeamCard from \"~/pages/team/JoinedTeamCard\";\nimport Typography from \"@material-ui/core/Typography\";\n\ninterface TeamType {\n    teamId: string;\n    name: string;\n}\n\ninterface TeamListState {\n    team: {\n        listCreated: TeamType[];\n        listJoined: TeamType[];\n    };\n    currentUser: {\n        currentUser: {};\n    };\n}\n\ninterface TeamListProps {\n    teamListCreated: TeamType[];\n    teamListJoined: TeamType[];\n    fetchCreatedTeams: Redux.ActionCreator<{}>;\n    fetchJoinedTeams: Redux.ActionCreator<{}>;\n    currentUser: {\n        accountId: string;\n    };\n}\n\nclass TeamList extends React.Component<TeamListProps, {}> {\n    // fetch user from server\n    componentDidMount(): void {\n        if (this.props.currentUser) {\n            this.props.fetchCreatedTeams(this.props.currentUser.accountId);\n            this.props.fetchJoinedTeams(this.props.currentUser.accountId);\n        }\n    }\n    componentDidUpdate(nextProps: TeamListProps): void {\n        if (\n            JSON.stringify(this.props.teamListCreated) !==\n                JSON.stringify(nextProps.teamListCreated) ||\n            JSON.stringify(this.props.teamListJoined) !==\n                JSON.stringify(nextProps.teamListJoined) ||\n            this.props.currentUser !== nextProps.currentUser\n        ) {\n            this.props.fetchCreatedTeams(this.props.currentUser.accountId);\n            this.props.fetchJoinedTeams(this.props.currentUser.accountId);\n        }\n    }\n    render(): React.ReactNode {\n        let list = null;\n        if (!this.props.currentUser) {\n            return <div />;\n        }\n        list = (\n            <div>\n                <ExpansionPanel>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography\n                            style={{\n                                textAlign: \"center\",\n                                fontWeight: \"bold\",\n                                color: \"#015C7F\",\n                            }}\n                            component=\"h1\"\n                        >\n                            CREATED TEAMS\n                        </Typography>\n                        <Typography\n                            style={{\n                                textAlign: \"center\",\n                                fontWeight: \"bold\",\n                                color: \"#000000\",\n                                marginLeft: \"20px\",\n                            }}\n                            component=\"h4\"\n                        >\n                            {this.props.teamListCreated.length} team(s) created.\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Grid container>\n                            {this.props.teamListCreated.map((team: TeamType, index) => {\n                                return (\n                                    <Grid\n                                        key={index}\n                                        item\n                                        lg={2}\n                                        md={4}\n                                        sm={6}\n                                        xs={12}\n                                        style={{ padding: \"10px\" }}\n                                    >\n                                        <CreatedTeamCard\n                                            name={team.name}\n                                            teamId={team.teamId}\n                                            refreshTeams={this.props.fetchCreatedTeams}\n                                            userId={this.props.currentUser.accountId}\n                                        />\n                                    </Grid>\n                                );\n                            })}\n                        </Grid>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n                <ExpansionPanel>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography\n                            style={{\n                                textAlign: \"center\",\n                                fontWeight: \"bold\",\n                                color: \"#015C7F\",\n                            }}\n                            component=\"h1\"\n                        >\n                            JOINED TEAMS\n                        </Typography>\n                        <Typography\n                            style={{\n                                textAlign: \"center\",\n                                fontWeight: \"bold\",\n                                color: \"#000000\",\n                                marginLeft: \"20px\",\n                            }}\n                            component=\"h4\"\n                        >\n                            {this.props.teamListJoined.length} team(s) joined.\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        {\n                            <Grid container>\n                                {this.props.teamListJoined.map((team: TeamType, index) => {\n                                    return (\n                                        <Grid\n                                            key={index}\n                                            item\n                                            lg={2}\n                                            md={4}\n                                            sm={6}\n                                            xs={12}\n                                            style={{ padding: \"10px\" }}\n                                        >\n                                            <JoinedTeamCard\n                                                name={team.name}\n                                                teamId={team.teamId}\n                                                refreshTeams={this.props.fetchJoinedTeams}\n                                            />\n                                        </Grid>\n                                    );\n                                })}\n                            </Grid>\n                        }\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            </div>\n        );\n\n        return (\n            <div>\n                {list}\n                <AddTeamDialog\n                    refreshTeams={this.props.fetchCreatedTeams}\n                    userId={this.props.currentUser.accountId}\n                    handleDialogClosed={\"\"}\n                    fullScreen\n                />\n            </div>\n        );\n    }\n}\n\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state: TeamListState) => {\n    return {\n        teamListCreated: state.team.listCreated,\n        teamListJoined: state.team.listJoined,\n        currentUser: state.currentUser.currentUser,\n    };\n};\n\n// map the action of redux to component prop\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        fetchCreatedTeams: (userId: string) => {\n            dispatch(teamActions.fetchCreatedTeams(userId));\n        },\n        fetchJoinedTeams: (userId: string) => {\n            dispatch(teamActions.fetchJoinedTeams(userId));\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(TeamList);\n"]}]}