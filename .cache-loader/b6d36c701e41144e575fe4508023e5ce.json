{"remainingRequest":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/TeamActivities/TeamInformation/TeamInformation.tsx","dependencies":[{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/TeamActivities/TeamInformation/TeamInformation.tsx","mtime":1532677259158},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./TeamHeaderStyle.scss\";\nimport ImageAvatarsTeamHeader from \"~/containers/TeamActivities/TeamInformation/ImageAvatarsTeamHeader\";\nimport ButtonAddUser from \"~/containers/TeamActivities/TeamInformation/ButtonAddUser\";\nimport { Grid, Paper } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { fetchMemberTeams } from \"~/data/team/teamHeader/thunk\";\nimport { order } from \"~/data/reducerHelper\";\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport SearchUserInTeam from \"~/containers/TeamActivities/AddUserToTeam/SearchUserInTeam\";\nimport TeamDetails from \"~/containers/TeamActivities/TeamInformation/TeamDetails/TeamDetails\";\nimport Tabs from \"@material-ui/core/Tabs/Tabs\";\nimport Tab from \"@material-ui/core/Tab/Tab\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport Forum from \"~/containers/Chat/Forum\";\nimport axios from \"../../../common/axiosConfigure\";\nimport { SnackbarType } from \"~/containers/snackbar/SnackbarType\";\nimport SportSnackbar from \"~/containers/snackbar/SportSnackbar\";\nfunction TabContainer(props) {\n    return React.createElement(Typography, { component: \"div\" }, props.children);\n}\nclass TeamInformation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            isInTeam: false,\n            value: 0,\n            isSnackbarOpen: false,\n            snackbarType: SnackbarType.Success,\n            snackbarMsg: \"\",\n        };\n        this.handleJoinClick = () => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.state.isInTeam && this.props.currentUser) {\n                const url = process.env.LOCAL_HOST_URL + `/teams/add`;\n                const currentUserId = this.props.currentUser.accountId;\n                yield axios\n                    .post(url, {\n                    teamId: this.props.match.params.teamId,\n                    accountId: currentUserId,\n                })\n                    .then(response => {\n                    if (response.status === 200) {\n                        this.state.snackbarMsg = \"Join successfully\";\n                        this.state.snackbarType = SnackbarType.Success;\n                    }\n                    else {\n                        this.state.snackbarMsg = \"Join Failed\";\n                        this.state.snackbarType = SnackbarType.Error;\n                    }\n                });\n                this.state.isInTeam = true;\n                this.state.isSnackbarOpen = true;\n                this.child.fetchUsersOfTeam(this.props.match.params.teamId);\n            }\n        });\n        this.handleClickOpen = () => {\n            this.setState({ isOpen: true });\n        };\n        this.handleClose = () => {\n            this.setState({ isOpen: false });\n            this.child.fetchUsersOfTeam(this.props.match.params.teamId);\n        };\n        this.handleChange = (event, value) => {\n            if (event) {\n                this.setState({ value });\n            }\n        };\n        this.handleChangeIndex = (index) => {\n            this.setState({ value: index });\n        };\n        this.child = React.createRef();\n    }\n    componentDidMount() {\n        this.props.fetchMemberTeams(this.props.match.params.teamId);\n    }\n    componentDidUpdate() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.state.isInTeam && this.props.currentUser) {\n                const currentUserId = this.props.currentUser.accountId;\n                yield axios\n                    .get(process.env.LOCAL_HOST_URL +\n                    `/teams/isUserExistedInTeam/${this.props.match.params.teamId}?accountId=${currentUserId}`)\n                    .then(response => {\n                    if (response.data) {\n                        this.setState({\n                            isInTeam: response.data,\n                        });\n                    }\n                });\n            }\n        });\n    }\n    componentWillMount() {\n        if (this.props.currentUser) {\n            const currentUserId = this.props.currentUser.accountId;\n            axios\n                .get(process.env.LOCAL_HOST_URL +\n                `/teams/isUserExistedInTeam/${this.props.match.params.teamId}?accountId=${currentUserId}`)\n                .then(response => {\n                this.setState({\n                    isInTeam: response.data,\n                });\n            });\n        }\n    }\n    render() {\n        let elements = React.createElement(\"div\", null);\n        if (this.props.teamMember.length > 0 && this.props.currentUser) {\n            const userId = this.props.currentUser.accountId;\n            const teamMember = this.props.teamMember[0];\n            let button = null;\n            if (this.state.isInTeam) {\n                if (teamMember.hostId === userId) {\n                    button = (React.createElement(ButtonAddUser, { onClick: this.handleClickOpen, teamId: this.props.match.params.teamId }));\n                }\n            }\n            else {\n                button = React.createElement(Button, { onClick: this.handleJoinClick }, \"JOIN\");\n            }\n            elements = (React.createElement(\"div\", { className: \"teamInfoBody\" },\n                React.createElement(Paper, { className: \"totalPaper\" },\n                    React.createElement(Grid, { container: true, wrap: \"nowrap\", spacing: 16 },\n                        React.createElement(Grid, { item: true, xs: true },\n                            React.createElement(Typography, { className: \"typoName\", variant: \"display1\", gutterBottom: true },\n                                \"Team \",\n                                teamMember.name),\n                            React.createElement(Grid, null,\n                                React.createElement(\"div\", { style: { display: \"flex\" } },\n                                    React.createElement(ImageAvatarsTeamHeader, { id: \"imageLink\", src: teamMember.imageLink }),\n                                    React.createElement(Typography, { className: \"typoHostName\", style: {\n                                            display: \"flex\",\n                                            justifyContent: \"center\",\n                                            alignItems: \"center\",\n                                        }, variant: \"body1\" }, teamMember.fullName)))),\n                        React.createElement(Grid, { item: true }, button))),\n                React.createElement(\"div\", null, this.state.isInTeam ? (React.createElement(\"div\", null,\n                    React.createElement(AppBar, { position: \"static\", color: \"default\" },\n                        React.createElement(Tabs, { value: this.state.value, onChange: this.handleChange, indicatorColor: \"primary\", textColor: \"primary\", fullWidth: true },\n                            React.createElement(Tab, { label: \"Forum\" }),\n                            React.createElement(Tab, { label: \"Team Members\" }))),\n                    React.createElement(SwipeableViews, { index: this.state.value, onChangeIndex: this.handleChangeIndex },\n                        React.createElement(TabContainer, null,\n                            React.createElement(Forum, { teamId: this.props.match.params.teamId })),\n                        React.createElement(TabContainer, null,\n                            React.createElement(TeamDetails, { onRef: (ref) => (this.child = ref), hostId: teamMember.hostId, teamId: this.props.match.params.teamId }))))) : (React.createElement(\"div\", null,\n                    React.createElement(AppBar, { position: \"static\", color: \"default\" },\n                        React.createElement(Tabs, { value: this.state.value, onChange: this.handleChange, indicatorColor: \"primary\", textColor: \"primary\", fullWidth: true, centered: true },\n                            React.createElement(Tab, { label: \"Team Members\", disabled: true }))),\n                    React.createElement(SwipeableViews, { index: this.state.value, onChangeIndex: this.handleChangeIndex },\n                        React.createElement(TabContainer, null,\n                            React.createElement(TeamDetails, { onRef: (ref) => (this.child = ref), hostId: teamMember.hostId, teamId: this.props.match.params.teamId })))))),\n                React.createElement(Dialog, { className: \"ad-dialog\", fullScreen: true, open: this.state.isOpen, disableEscapeKeyDown: true },\n                    React.createElement(AppBar, { position: \"static\" },\n                        React.createElement(Toolbar, null,\n                            React.createElement(IconButton, { className: \"closeButton\", color: \"inherit\", \"aria-label\": \"Menu\" },\n                                React.createElement(CloseIcon, { onClick: this.handleClose })),\n                            React.createElement(Typography, { variant: \"title\", color: \"inherit\", className: \"flex\" }, \"Find people\"),\n                            React.createElement(Button, { color: \"inherit\", onClick: this.handleClose }, \"Cancel\"))),\n                    React.createElement(SearchUserInTeam, { teamId: this.props.match.params.teamId })),\n                this.state.isSnackbarOpen ? (React.createElement(SportSnackbar, { type: this.state.snackbarType, message: this.state.snackbarMsg })) : null));\n        }\n        return React.createElement(\"div\", null, elements);\n    }\n}\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state) => {\n    return {\n        teamMember: order(state.teamMember.entitiesOrder, state.teamMember.entities),\n        currentUser: state.currentUser.currentUser,\n    };\n};\n// map the action of redux to component prop\nconst mapDispatchToProps = {\n    fetchMemberTeams,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInformation);\n",{"version":3,"file":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/TeamActivities/TeamInformation/TeamInformation.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/TeamActivities/TeamInformation/TeamInformation.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./TeamHeaderStyle.scss\";\nimport ImageAvatarsTeamHeader from \"~/containers/TeamActivities/TeamInformation/ImageAvatarsTeamHeader\";\nimport ButtonAddUser from \"~/containers/TeamActivities/TeamInformation/ButtonAddUser\";\nimport { Grid, Paper, Theme } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"~/data/types\";\nimport { ITeamMember } from \"~/data/team/teamHeader/types\";\nimport { fetchMemberTeams } from \"~/data/team/teamHeader/thunk\";\nimport { RouteComponentProps } from \"react-router\";\nimport { order } from \"~/data/reducerHelper\";\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport SearchUserInTeam from \"~/containers/TeamActivities/AddUserToTeam/SearchUserInTeam\";\nimport TeamDetails from \"~/containers/TeamActivities/TeamInformation/TeamDetails/TeamDetails\";\nimport { CurrentUser } from \"~/data/auth/actions\";\nimport Tabs from \"@material-ui/core/Tabs/Tabs\";\nimport Tab from \"@material-ui/core/Tab/Tab\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport Forum from \"~/containers/Chat/Forum\";\nimport axios from \"../../../common/axiosConfigure\";\nimport { SnackbarType } from \"~/containers/snackbar/SnackbarType\";\nimport SportSnackbar from \"~/containers/snackbar/SportSnackbar\";\n\ninterface IOwnProps {\n    theme: Theme;\n    currentUser: CurrentUser;\n}\n\ninterface IStateProps {\n    teamMember: ITeamMember[];\n}\n\ninterface IDispatchProps {\n    fetchMemberTeams: typeof fetchMemberTeams;\n}\n\ninterface IParams {\n    teamId: string;\n}\n\ninterface AddUserIntoTeamModalState {\n    isOpen: boolean;\n    value: number;\n    isInTeam: boolean;\n    isSnackbarOpen: boolean;\n    snackbarType: SnackbarType;\n    snackbarMsg: string;\n}\n\ninterface IProps extends IOwnProps, IStateProps, IDispatchProps, RouteComponentProps<IParams> {}\n\ninterface TeamDetailsTabContainerProps {\n    children: {};\n}\n\nfunction TabContainer(props: TeamDetailsTabContainerProps) {\n    return <Typography component=\"div\">{props.children}</Typography>;\n}\n\nclass TeamInformation extends React.Component<IProps, AddUserIntoTeamModalState> {\n    private child: any | null;\n    constructor(props: IProps) {\n        super(props);\n        this.child = React.createRef();\n    }\n    componentDidMount(): void {\n        this.props.fetchMemberTeams(this.props.match.params.teamId);\n    }\n\n    async componentDidUpdate(): Promise<void> {\n        if (!this.state.isInTeam && this.props.currentUser) {\n            const currentUserId = this.props.currentUser.accountId;\n            await axios\n                .get(\n                    process.env.LOCAL_HOST_URL +\n                        `/teams/isUserExistedInTeam/${\n                            this.props.match.params.teamId\n                        }?accountId=${currentUserId}`,\n                )\n                .then(response => {\n                    if (response.data) {\n                        this.setState({\n                            isInTeam: response.data,\n                        });\n                    }\n                });\n        }\n    }\n    state = {\n        isOpen: false,\n        isInTeam: false,\n        value: 0,\n        isSnackbarOpen: false,\n        snackbarType: SnackbarType.Success,\n        snackbarMsg: \"\",\n    };\n    private handleJoinClick = async (): Promise<void> => {\n        if (!this.state.isInTeam && this.props.currentUser) {\n            const url: string = process.env.LOCAL_HOST_URL + `/teams/add`;\n            const currentUserId = this.props.currentUser.accountId;\n            await axios\n                .post(url, {\n                    teamId: this.props.match.params.teamId,\n                    accountId: currentUserId,\n                })\n                .then(response => {\n                    if (response.status === 200) {\n                        this.state.snackbarMsg = \"Join successfully\";\n                        this.state.snackbarType = SnackbarType.Success;\n                    } else {\n                        this.state.snackbarMsg = \"Join Failed\";\n                        this.state.snackbarType = SnackbarType.Error;\n                    }\n                });\n            this.state.isInTeam = true;\n            this.state.isSnackbarOpen = true;\n            this.child.fetchUsersOfTeam(this.props.match.params.teamId);\n        }\n    };\n    private handleClickOpen = (): void => {\n        this.setState({ isOpen: true });\n    };\n\n    private handleClose = (): void => {\n        this.setState({ isOpen: false });\n        this.child.fetchUsersOfTeam(this.props.match.params.teamId);\n    };\n\n    private handleChange = (event: React.ChangeEvent<{}>, value: number) => {\n        if (event) {\n            this.setState({ value });\n        }\n    };\n\n    private handleChangeIndex = (index: number) => {\n        this.setState({ value: index });\n    };\n\n    componentWillMount(): void {\n        if (this.props.currentUser) {\n            const currentUserId = this.props.currentUser.accountId;\n            axios\n                .get(\n                    process.env.LOCAL_HOST_URL +\n                        `/teams/isUserExistedInTeam/${\n                            this.props.match.params.teamId\n                        }?accountId=${currentUserId}`,\n                )\n                .then(response => {\n                    this.setState({\n                        isInTeam: response.data,\n                    });\n                });\n        }\n    }\n\n    render(): React.ReactNode {\n        let elements = <div />;\n        if (this.props.teamMember.length > 0 && this.props.currentUser) {\n            const userId = this.props.currentUser.accountId;\n            const teamMember = this.props.teamMember[0];\n            let button = null;\n            if (this.state.isInTeam) {\n                if (teamMember.hostId === userId) {\n                    button = (\n                        <ButtonAddUser\n                            onClick={this.handleClickOpen}\n                            teamId={this.props.match.params.teamId}\n                        />\n                    );\n                }\n            } else {\n                button = <Button onClick={this.handleJoinClick}>JOIN</Button>;\n            }\n            elements = (\n                <div className=\"teamInfoBody\">\n                    <Paper className=\"totalPaper\">\n                        <Grid container wrap=\"nowrap\" spacing={16}>\n                            <Grid item xs>\n                                <Typography className=\"typoName\" variant=\"display1\" gutterBottom>\n                                    Team {teamMember.name}\n                                </Typography>\n                                <Grid>\n                                    <div style={{ display: \"flex\" }}>\n                                        <ImageAvatarsTeamHeader\n                                            id=\"imageLink\"\n                                            src={teamMember.imageLink}\n                                        />\n                                        <Typography\n                                            className=\"typoHostName\"\n                                            style={{\n                                                display: \"flex\",\n                                                justifyContent: \"center\",\n                                                alignItems: \"center\",\n                                            }}\n                                            variant=\"body1\"\n                                        >\n                                            {teamMember.fullName}\n                                        </Typography>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid item>{button}</Grid>\n                        </Grid>\n                    </Paper>\n\n                    <div>\n                        {this.state.isInTeam ? (\n                            <div>\n                                <AppBar position=\"static\" color=\"default\">\n                                    <Tabs\n                                        value={this.state.value}\n                                        onChange={this.handleChange}\n                                        indicatorColor=\"primary\"\n                                        textColor=\"primary\"\n                                        fullWidth\n                                    >\n                                        <Tab label=\"Forum\" />\n                                        <Tab label=\"Team Members\" />\n                                    </Tabs>\n                                </AppBar>\n                                <SwipeableViews\n                                    index={this.state.value}\n                                    onChangeIndex={this.handleChangeIndex}\n                                >\n                                    <TabContainer>\n                                        <Forum teamId={this.props.match.params.teamId} />\n                                    </TabContainer>\n\n                                    <TabContainer>\n                                        <TeamDetails\n                                            onRef={(ref: any) => (this.child = ref)}\n                                            hostId={teamMember.hostId}\n                                            teamId={this.props.match.params.teamId}\n                                        />\n                                    </TabContainer>\n                                </SwipeableViews>\n                            </div>\n                        ) : (\n                            <div>\n                                <AppBar position=\"static\" color=\"default\">\n                                    <Tabs\n                                        value={this.state.value}\n                                        onChange={this.handleChange}\n                                        indicatorColor=\"primary\"\n                                        textColor=\"primary\"\n                                        fullWidth\n                                        centered\n                                    >\n                                        <Tab label=\"Team Members\" disabled />\n                                    </Tabs>\n                                </AppBar>\n                                <SwipeableViews\n                                    index={this.state.value}\n                                    onChangeIndex={this.handleChangeIndex}\n                                >\n                                    <TabContainer>\n                                        <TeamDetails\n                                            onRef={(ref: any) => (this.child = ref)}\n                                            hostId={teamMember.hostId}\n                                            teamId={this.props.match.params.teamId}\n                                        />\n                                    </TabContainer>\n                                </SwipeableViews>\n                            </div>\n                        )}\n                    </div>\n\n                    <Dialog\n                        className=\"ad-dialog\"\n                        fullScreen={true}\n                        open={this.state.isOpen}\n                        disableEscapeKeyDown\n                    >\n                        <AppBar position=\"static\">\n                            <Toolbar>\n                                <IconButton\n                                    className=\"closeButton\"\n                                    color=\"inherit\"\n                                    aria-label=\"Menu\"\n                                >\n                                    <CloseIcon onClick={this.handleClose} />\n                                </IconButton>\n                                <Typography variant=\"title\" color=\"inherit\" className=\"flex\">\n                                    Find people\n                                </Typography>\n                                <Button color=\"inherit\" onClick={this.handleClose}>\n                                    Cancel\n                                </Button>\n                            </Toolbar>\n                        </AppBar>\n                        <SearchUserInTeam teamId={this.props.match.params.teamId} />\n                    </Dialog>\n                    {this.state.isSnackbarOpen ? (\n                        <SportSnackbar\n                            type={this.state.snackbarType}\n                            message={this.state.snackbarMsg}\n                        />\n                    ) : null}\n                </div>\n            );\n        }\n        return <div>{elements}</div>;\n    }\n}\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state: IRootState) => {\n    return {\n        teamMember: order(state.teamMember.entitiesOrder, state.teamMember.entities),\n        currentUser: state.currentUser.currentUser,\n    };\n};\n\n// map the action of redux to component prop\nconst mapDispatchToProps = {\n    fetchMemberTeams,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(TeamInformation);\n"]}]}