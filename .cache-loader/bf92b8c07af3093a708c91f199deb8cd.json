{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/layouts/appbar/DrawerAppBar.tsx","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/layouts/appbar/DrawerAppBar.tsx","mtime":1533978639944},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport SimpleList from \"~/containers/layouts/appbar/list/SimpleList\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport Grid from \"@material-ui/core/es/Grid/Grid\";\nimport Avatar from \"~/containers/layouts/appbar/list/Avatar\";\nimport { withRouter } from \"react-router\";\nimport \"./DrawAppBarStyle.scss\";\nimport SearchBar from \"../../searchBox/index\";\nimport Badge from \"@material-ui/core/Badge/Badge\";\nimport * as Stomp from \"stompjs\";\nimport { competitorNotificationActions } from \"~/data/notification\";\nimport { connect } from \"react-redux\";\nimport axios from \"~/common/axiosConfigure\";\nimport Notifications from \"~/containers/Notifications/Notifications\";\nconst drawerWidth = 250;\nconst SockJS = require(\"sockjs-client\");\nconst classNames = require(\"classnames\");\nconst styles = (theme) => createStyles({\n    root: {\n        flexGrow: 1,\n        minHeight: \"100%\",\n        backgroundImage: \"url(\" + require(\"../../../theme/images/background.svg\") + \")\",\n        backgroundSize: \"cover\",\n    },\n    appFrame: {\n        height: \"inherits\",\n        overflow: \"hidden\",\n        position: \"relative\",\n        display: \"flex\",\n        width: \"100%\",\n    },\n    appBar: {\n        position: \"fixed\",\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    \"appBarShift-left\": {\n        marginLeft: drawerWidth,\n    },\n    \"appBarShift-right\": {\n        marginRight: drawerWidth,\n    },\n    menuButton: {\n        marginLeft: 12,\n        marginRight: 20,\n    },\n    hide: {\n        display: \"none\",\n    },\n    drawerPaper: {\n        position: \"fixed\",\n        width: drawerWidth,\n    },\n    drawerHeader: Object.assign({ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\", padding: \"0 8px\" }, theme.mixins.toolbar),\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing.unit * 3,\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    \"content-left\": {\n        marginLeft: 0,\n    },\n    \"content-right\": {\n        marginRight: -drawerWidth,\n    },\n    contentShift: {\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    \"contentShift-left\": {\n        marginLeft: 0,\n    },\n    \"contentShift-right\": {\n        marginRight: 0,\n    },\n    badge: {\n        margin: `0 ${theme.spacing.unit * 2}px`,\n        height: 10,\n        width: 10,\n        right: -14,\n        top: 10,\n    },\n    badge2: {\n        margin: `0 ${theme.spacing.unit * 2}px`,\n        height: 10,\n        width: 10,\n        right: -14,\n        top: 10,\n        backgroundColor: \"\",\n    },\n});\nclass DrawerAppBar extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            open: false,\n            show: false,\n            notify: false,\n            count: 0,\n            notification: {\n                notifications: [],\n            },\n            currentUser: {\n                currentUser: {},\n            },\n        };\n        this.socket = new SockJS(process.env.SOCIAL_LOGIN_LOCAL_HOST_URL + \"/socket\");\n        this.stompClient = Stomp.over(this.socket);\n        this.isCancelled = false;\n        this.handleDrawerOpen = () => {\n            this.setState({ open: true, notify: false });\n            // this.loadData();\n        };\n        this.handleDrawerClose = () => {\n            this.setState({ open: false, notify: false });\n        };\n        this.handleNotificationOpen = () => {\n            this.setState({ show: true });\n        };\n        this.handleNotificationClose = () => {\n            const urlDeleteApi = process.env.LOCAL_HOST_URL +\n                `/competitionnotification/update/${this.props.currentUser.accountId}`;\n            axios.put(urlDeleteApi).then(() => {\n                this.setState({ show: false, count: 0 });\n                this.props.fetchNotifications(this.props.currentUser.accountId);\n            });\n        };\n        this.loadData = () => {\n            if (this.props.currentUser) {\n                this.props.fetchNotifications(this.props.currentUser.accountId);\n                if (this.props.notifications.length > 0) {\n                    this.setState({\n                        count: this.props.notifications.length,\n                        notify: this.props.notifications.length > 0 ? true : false,\n                    });\n                    const competitionIdRaw = this.props.notifications.map(e => {\n                        return e.competitionId;\n                    });\n                    const competitionId = competitionIdRaw.filter((value, index) => {\n                        value;\n                        return competitionIdRaw[index - 1] !== competitionIdRaw[index];\n                    });\n                    competitionId.map(e => {\n                        this.stompClient.subscribe(`/topic/${e}`, () => {\n                            !this.isCancelled &&\n                                this.setState({\n                                    count: this.state.count + 1,\n                                    notify: true,\n                                });\n                            this.loadData();\n                        });\n                    });\n                }\n            }\n        };\n        this.redirectToProfile = () => {\n            if (this.props.currentUser) {\n                this.props.history.replace(`/profile/${this.props.currentUser.accountId}`);\n            }\n        };\n    }\n    componentDidMount() {\n        this.loadData();\n    }\n    componentDidUpdate(nextProps) {\n        this.stompClient.connect({}, () => {\n            this.stompClient.subscribe(`/notification/${this.props.currentUser.accountId}`, payload => {\n                this.stompClient.subscribe(payload.body, () => {\n                    !this.isCancelled &&\n                        this.setState({\n                            count: this.state.count + 1,\n                            notify: true,\n                        });\n                    this.loadData();\n                });\n            });\n        });\n        if (JSON.stringify(this.props.notifications) !== JSON.stringify(nextProps.notifications)) {\n            this.loadData();\n        }\n    }\n    componentWillUnmount() {\n        this.isCancelled = true;\n    }\n    render() {\n        const { classes, theme } = this.props;\n        const { open, notify, count } = this.state;\n        const userName = this.props.currentUser ? this.props.currentUser.fullName : \"\";\n        const avatarUrl = this.props.currentUser ? this.props.currentUser.imageLink : \"\";\n        const logoURL = require(\"~/theme/images/logo.png\");\n        this.stompClient.debug = () => { };\n        const drawer = (React.createElement(Drawer, { onClose: this.handleDrawerClose, onClick: this.handleDrawerClose, anchor: \"left\", open: open, classes: {\n                paper: classes.drawerPaper,\n            } },\n            React.createElement(\"div\", { className: classes.drawerHeader, id: \"user-info-title\", tabIndex: 0, role: \"button\", onClick: this.handleDrawerClose, onKeyDown: this.handleDrawerClose },\n                React.createElement(Grid, { container: true },\n                    React.createElement(Grid, { item: true, xs: 4 },\n                        React.createElement(Avatar, { onClick: this.redirectToProfile, id: \"avatarUser\", src: avatarUrl })),\n                    React.createElement(Grid, { item: true, xs: 6 },\n                        React.createElement(Typography, { id: \"drawer-username\", variant: \"body2\", color: \"inherit\", noWrap: true }, userName)),\n                    React.createElement(Grid, { item: true, xs: 2 },\n                        React.createElement(IconButton, { onClick: this.handleDrawerClose }, theme && theme.direction === \"rtl\" ? (React.createElement(ChevronRightIcon, null)) : (React.createElement(ChevronLeftIcon, null)))))),\n            React.createElement(Divider, null),\n            React.createElement(SimpleList, { count: count, open: this.handleNotificationOpen, notifications: this.props.notifications })));\n        return (React.createElement(\"div\", { className: classes.root },\n            React.createElement(\"div\", { className: classes.appFrame },\n                React.createElement(AppBar, { style: { backgroundColor: \"#015C7F\" }, className: classNames(classes.appBar, {\n                        [classes[\"appBarShift-left\"]]: open,\n                    }) },\n                    React.createElement(Toolbar, { disableGutters: !open },\n                        React.createElement(IconButton, { color: \"inherit\", \"aria-label\": \"open drawer\", onClick: this.handleDrawerOpen, className: classNames(classes.menuButton, open && classes.hide) },\n                            React.createElement(Badge, { badgeContent: \"\", color: notify ? \"error\" : \"default\", classes: { badge: classes.badge } },\n                                React.createElement(MenuIcon, null))),\n                        React.createElement(Typography, { variant: \"title\", color: \"inherit\", noWrap: true },\n                            React.createElement(\"img\", { src: logoURL, style: { paddingTop: \"5px\" }, height: \"60 px\", alt: \"logo Sport\" })),\n                        React.createElement(SearchBar, null))),\n                drawer,\n                React.createElement(\"main\", { className: classNames(classes.content, classes[`content-left`], {\n                        [classes.contentShift]: open,\n                    }), style: { maxWidth: \"97%\" }, id: \"content-area\" },\n                    React.createElement(\"div\", { className: classes.drawerHeader }),\n                    this.props.children)),\n            React.createElement(Notifications, { show: this.state.show, close: this.handleNotificationClose, notifications: this.props.notifications })));\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        notifications: state.notification.notifications,\n        currentUser: state.currentUser.currentUser,\n    };\n};\n// map the action of redux to component prop\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchNotifications: (id) => {\n            dispatch(competitorNotificationActions.fetchNotifications(id));\n        },\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, { withTheme: true })(withRouter(DrawerAppBar)));\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/layouts/appbar/DrawerAppBar.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/layouts/appbar/DrawerAppBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport SimpleList from \"~/containers/layouts/appbar/list/SimpleList\";\nimport LoginInformation from \"~/containers/layouts/appbar/LoginInformation\";\nimport { Theme, WithStyles } from \"@material-ui/core/es/styles\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport Grid from \"@material-ui/core/es/Grid/Grid\";\nimport Avatar from \"~/containers/layouts/appbar/list/Avatar\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport \"./DrawAppBarStyle.scss\";\nimport SearchBar from \"../../searchBox/index\";\nimport Badge from \"@material-ui/core/Badge/Badge\";\nimport * as Stomp from \"stompjs\";\nimport { competitorNotificationActions } from \"~/data/notification\";\nimport { ICompetitor } from \"~/data/notification/actionCreators\";\nimport { connect } from \"react-redux\";\nimport axios from \"~/common/axiosConfigure\";\nimport Notifications from \"~/containers/Notifications/Notifications\";\n\nconst drawerWidth = 250;\nconst SockJS = require(\"sockjs-client\");\nconst classNames = require(\"classnames\");\n\ninterface IDrawer2AppBarProps extends WithStyles<typeof styles> {\n    loginInformation?: LoginInformation;\n    theme?: Theme;\n    notifications: ICompetitor[];\n    fetchNotifications: (accountId: string) => void;\n    currentUser: {\n        accountId: string;\n        fullName: string;\n        imageLink: string;\n    };\n}\n\ninterface IDrawerAppBar2AppBarState {\n    open: boolean;\n    show: boolean;\n    notify: boolean;\n    count: number;\n    notification: {\n        notifications: ICompetitor[];\n    };\n    currentUser: {\n        currentUser: {};\n    };\n}\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n            minHeight: \"100%\",\n            backgroundImage: \"url(\" + require(\"../../../theme/images/background.svg\") + \")\",\n            backgroundSize: \"cover\",\n        },\n        appFrame: {\n            height: \"inherits\",\n            overflow: \"hidden\",\n            position: \"relative\",\n            display: \"flex\",\n            width: \"100%\",\n        },\n        appBar: {\n            position: \"fixed\",\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n        },\n        appBarShift: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            transition: theme.transitions.create([\"margin\", \"width\"], {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n        },\n        \"appBarShift-left\": {\n            marginLeft: drawerWidth,\n        },\n        \"appBarShift-right\": {\n            marginRight: drawerWidth,\n        },\n        menuButton: {\n            marginLeft: 12,\n            marginRight: 20,\n        },\n        hide: {\n            display: \"none\",\n        },\n        drawerPaper: {\n            position: \"fixed\",\n            width: drawerWidth,\n        },\n        drawerHeader: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"flex-end\",\n            padding: \"0 8px\",\n            ...theme.mixins.toolbar,\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing.unit * 3,\n            transition: theme.transitions.create(\"margin\", {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n        },\n        \"content-left\": {\n            marginLeft: 0,\n        },\n        \"content-right\": {\n            marginRight: -drawerWidth,\n        },\n        contentShift: {\n            transition: theme.transitions.create(\"margin\", {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n        },\n        \"contentShift-left\": {\n            marginLeft: 0,\n        },\n        \"contentShift-right\": {\n            marginRight: 0,\n        },\n        badge: {\n            margin: `0 ${theme.spacing.unit * 2}px`,\n            height: 10,\n            width: 10,\n            right: -14,\n            top: 10,\n        },\n        badge2: {\n            margin: `0 ${theme.spacing.unit * 2}px`,\n            height: 10,\n            width: 10,\n            right: -14,\n            top: 10,\n            backgroundColor: \"\",\n        },\n    });\nclass DrawerAppBar extends React.Component<\n    RouteComponentProps<{}> & IDrawer2AppBarProps,\n    IDrawerAppBar2AppBarState\n> {\n    state = {\n        open: false,\n        show: false,\n        notify: false,\n        count: 0,\n        notification: {\n            notifications: [],\n        },\n        currentUser: {\n            currentUser: {},\n        },\n    };\n\n    private socket = new SockJS(process.env.SOCIAL_LOGIN_LOCAL_HOST_URL + \"/socket\");\n    private stompClient = Stomp.over(this.socket);\n    private isCancelled = false;\n    private handleDrawerOpen = (): void => {\n        this.setState({ open: true, notify: false });\n        // this.loadData();\n    };\n\n    private handleDrawerClose = (): void => {\n        this.setState({ open: false, notify: false });\n    };\n\n    private handleNotificationOpen = (): void => {\n        this.setState({ show: true });\n    };\n\n    private handleNotificationClose = (): void => {\n        const urlDeleteApi =\n            process.env.LOCAL_HOST_URL +\n            `/competitionnotification/update/${this.props.currentUser.accountId}`;\n        axios.put(urlDeleteApi).then(() => {\n            this.setState({ show: false, count: 0 });\n            this.props.fetchNotifications(this.props.currentUser.accountId);\n        });\n    };\n\n    componentDidMount(): void {\n        this.loadData();\n    }\n\n    componentDidUpdate(nextProps: IDrawer2AppBarProps): void {\n        this.stompClient.connect(\n            {},\n            () => {\n                this.stompClient.subscribe(\n                    `/notification/${this.props.currentUser.accountId}`,\n                    payload => {\n                        this.stompClient.subscribe(payload.body, () => {\n                            !this.isCancelled &&\n                                this.setState({\n                                    count: this.state.count + 1,\n                                    notify: true,\n                                });\n                            this.loadData();\n                        });\n                    },\n                );\n            },\n        );\n        if (JSON.stringify(this.props.notifications) !== JSON.stringify(nextProps.notifications)) {\n            this.loadData();\n        }\n    }\n\n    componentWillUnmount(): void {\n        this.isCancelled = true;\n    }\n\n    private loadData = (): void => {\n        if (this.props.currentUser) {\n            this.props.fetchNotifications(this.props.currentUser.accountId);\n            if (this.props.notifications.length > 0) {\n                this.setState({\n                    count: this.props.notifications.length,\n                    notify: this.props.notifications.length > 0 ? true : false,\n                });\n                const competitionIdRaw: string[] = this.props.notifications.map(e => {\n                    return e.competitionId;\n                });\n                const competitionId: string[] = competitionIdRaw.filter((value, index) => {\n                    value;\n                    return competitionIdRaw[index - 1] !== competitionIdRaw[index];\n                });\n                competitionId.map(e => {\n                    this.stompClient.subscribe(`/topic/${e}`, () => {\n                        !this.isCancelled &&\n                            this.setState({\n                                count: this.state.count + 1,\n                                notify: true,\n                            });\n                        this.loadData();\n                    });\n                });\n            }\n        }\n    };\n\n    private redirectToProfile = (): void => {\n        if (this.props.currentUser) {\n            this.props.history.replace(`/profile/${this.props.currentUser.accountId}`);\n        }\n    };\n\n    render(): React.ReactNode {\n        const { classes, theme } = this.props;\n        const { open, notify, count } = this.state;\n        const userName = this.props.currentUser ? this.props.currentUser.fullName : \"\";\n        const avatarUrl = this.props.currentUser ? this.props.currentUser.imageLink : \"\";\n        const logoURL = require(\"~/theme/images/logo.png\");\n        this.stompClient.debug = () => {};\n        const drawer = (\n            <Drawer\n                onClose={this.handleDrawerClose}\n                onClick={this.handleDrawerClose}\n                anchor=\"left\"\n                open={open}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div\n                    className={classes.drawerHeader}\n                    id=\"user-info-title\"\n                    tabIndex={0}\n                    role=\"button\"\n                    onClick={this.handleDrawerClose}\n                    onKeyDown={this.handleDrawerClose}\n                >\n                    <Grid container>\n                        <Grid item xs={4}>\n                            <Avatar\n                                onClick={this.redirectToProfile}\n                                id=\"avatarUser\"\n                                src={avatarUrl}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography id=\"drawer-username\" variant=\"body2\" color=\"inherit\" noWrap>\n                                {userName}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <IconButton onClick={this.handleDrawerClose}>\n                                {theme && theme.direction === \"rtl\" ? (\n                                    <ChevronRightIcon />\n                                ) : (\n                                    <ChevronLeftIcon />\n                                )}\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n                <Divider />\n                <SimpleList\n                    count={count}\n                    open={this.handleNotificationOpen}\n                    notifications={this.props.notifications}\n                />\n            </Drawer>\n        );\n        return (\n            <div className={classes.root}>\n                <div className={classes.appFrame}>\n                    <AppBar\n                        style={{ backgroundColor: \"#015C7F\" }}\n                        className={classNames(classes.appBar, {\n                            [classes[\"appBarShift-left\"]]: open,\n                        })}\n                    >\n                        <Toolbar disableGutters={!open}>\n                            <IconButton\n                                color=\"inherit\"\n                                aria-label=\"open drawer\"\n                                onClick={this.handleDrawerOpen}\n                                className={classNames(classes.menuButton, open && classes.hide)}\n                            >\n                                <Badge\n                                    badgeContent=\"\"\n                                    color={notify ? \"error\" : \"default\"}\n                                    classes={{ badge: classes.badge }}\n                                >\n                                    <MenuIcon />\n                                </Badge>\n                            </IconButton>\n                            <Typography variant=\"title\" color=\"inherit\" noWrap>\n                                <img\n                                    src={logoURL}\n                                    style={{ paddingTop: \"5px\" }}\n                                    height=\"60 px\"\n                                    alt=\"logo Sport\"\n                                />\n                            </Typography>\n                            <SearchBar />\n                        </Toolbar>\n                    </AppBar>\n                    {drawer}\n                    <main\n                        className={classNames(classes.content, classes[`content-left`], {\n                            [classes.contentShift]: open,\n                        })}\n                        style={{ maxWidth: \"97%\" }}\n                        id=\"content-area\"\n                    >\n                        <div className={classes.drawerHeader} />\n                        {this.props.children}\n                    </main>\n                </div>\n                <Notifications\n                    show={this.state.show}\n                    close={this.handleNotificationClose}\n                    notifications={this.props.notifications}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IDrawerAppBar2AppBarState) => {\n    return {\n        notifications: state.notification.notifications,\n        currentUser: state.currentUser.currentUser,\n    };\n};\n\n// map the action of redux to component prop\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        fetchNotifications: (id: string) => {\n            dispatch(competitorNotificationActions.fetchNotifications(id));\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withStyles(styles, { withTheme: true })(withRouter(DrawerAppBar)));\n"]}]}