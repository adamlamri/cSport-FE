{"remainingRequest":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/components/Profile/Statistic.tsx","dependencies":[{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/components/Profile/Statistic.tsx","mtime":1532681924901},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport axios from \"~/common/axiosConfigure.ts\";\nimport TimeInterval from \"~/components/Profile/TimeInterval\";\nimport \"./Statistic.scss\";\nimport Paper from \"@material-ui/core/Paper\";\nimport BarChart from \"~/components/Profile/BarChart\";\nclass Statistic extends React.Component {\n    constructor(props) {\n        super(props);\n        this.calculateWidth = (time, totalTime) => {\n            return (time * 100) / totalTime + \"%\";\n        };\n        const date = new Date();\n        this.state = {\n            statistic: null,\n            interval: \"\",\n            timeZoneOffset: date.getTimezoneOffset(),\n        };\n        this.updateData(\"0\");\n    }\n    componentDidMount() {\n        const url = process.env.LOCAL_HOST_URL +\n            `/accounts/statistic/${this.props.userId}?timeinterval=0&timezoneoffset=${this.state.timeZoneOffset}`;\n        axios.get(url).then(response => {\n            this.setState({ statistic: response.data });\n        });\n    }\n    updateData(index) {\n        const tempInterval = index;\n        const url = process.env.LOCAL_HOST_URL +\n            `/accounts/statistic/${this.props.userId}?timeinterval=${tempInterval}&timezoneoffset=${this.state.timeZoneOffset}`;\n        axios.get(url).then(response => {\n            this.setState({\n                statistic: response.data,\n                interval: tempInterval,\n            });\n        });\n    }\n    render() {\n        if (this.state.statistic == null) {\n            return React.createElement(\"div\", null);\n        }\n        const distanceTotal = this.state.statistic.runningDistanceTotal + this.state.statistic.cyclingDistanceTotal;\n        const timeTotal = parseFloat((this.state.statistic.activityTimeTotal / 3600).toFixed(2));\n        return (React.createElement(\"div\", null,\n            React.createElement(Paper, { style: { backgroundColor: \"#f5eeee73\", height: \"fit-content\" } },\n                React.createElement(\"div\", { style: {\n                        textAlign: \"right\",\n                        paddingTop: \"10px\",\n                        paddingRight: \"10px\",\n                        paddingBottom: \"15px\",\n                    } },\n                    React.createElement(TimeInterval, { updateData: this.updateData.bind(this) })),\n                React.createElement(\"div\", null,\n                    React.createElement(\"div\", { className: \"general\" },\n                        \"Total time: \",\n                        timeTotal,\n                        \" hour(s)\"),\n                    React.createElement(\"div\", { className: \"general\" },\n                        \"Total days: \",\n                        this.state.statistic.activeDayTotal,\n                        \" day(s)\"),\n                    this.state.statistic.runningRank !== \"-\" && (React.createElement(\"div\", { className: \"general\" },\n                        \"Running rank: \",\n                        this.state.statistic.runningRank)),\n                    React.createElement(\"div\", null,\n                        React.createElement(\"div\", { className: \"charts\" },\n                            distanceTotal !== 0.0 && (React.createElement(\"div\", null,\n                                React.createElement(\"span\", { className: \"chart-title\" }, \"Distance\"),\n                                React.createElement(\"div\", { className: \"chart-horiz\" },\n                                    React.createElement(BarChart, { name: \"Running\", stat: this.state.statistic.runningDistanceTotal, percent: this.calculateWidth(this.state.statistic.runningDistanceTotal, distanceTotal) }),\n                                    React.createElement(BarChart, { name: \"Cycling\", stat: this.state.statistic.cyclingDistanceTotal, percent: this.calculateWidth(this.state.statistic.cyclingDistanceTotal, distanceTotal) })))),\n                            this.state.statistic.activityTimeTotal !== 0.0 && (React.createElement(\"div\", null,\n                                React.createElement(\"span\", { className: \"chart-title\" }, \"Time\"),\n                                React.createElement(BarChart, { name: \"Running\", stat: parseFloat((this.state.statistic.runningTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.runningTimeTotal, this.state.statistic.activityTimeTotal) }),\n                                React.createElement(BarChart, { name: \"Cycling\", stat: parseFloat((this.state.statistic.cyclingTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.cyclingTimeTotal, this.state.statistic.activityTimeTotal) }),\n                                React.createElement(BarChart, { name: \"Yoga\", stat: parseFloat((this.state.statistic.yogaTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.yogaTimeTotal, this.state.statistic.activityTimeTotal) }),\n                                React.createElement(BarChart, { name: \"Hiking\", stat: parseFloat((this.state.statistic.hikingTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.hikingTimeTotal, this.state.statistic.activityTimeTotal) }),\n                                React.createElement(BarChart, { name: \"Skating\", stat: parseFloat((this.state.statistic.skatingTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.skatingTimeTotal, this.state.statistic.activityTimeTotal) }),\n                                React.createElement(BarChart, { name: \"Swimming\", stat: parseFloat((this.state.statistic.swimmingTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.swimmingTimeTotal, this.state.statistic.activityTimeTotal) }),\n                                React.createElement(BarChart, { name: \"Gym\", stat: parseFloat((this.state.statistic.gymTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.gymTimeTotal, this.state.statistic.activityTimeTotal) }),\n                                React.createElement(BarChart, { name: \"Meditation\", stat: parseFloat((this.state.statistic.meditationTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.meditationTimeTotal, this.state.statistic.activityTimeTotal) }),\n                                React.createElement(BarChart, { name: \"Climbing\", stat: parseFloat((this.state.statistic.climbingTimeTotal / 3600).toFixed(2)), percent: this.calculateWidth(this.state.statistic.climbingTimeTotal, this.state.statistic.activityTimeTotal) }))),\n                            this.state.statistic.runningDistanceRating !== 0.0 && (React.createElement(\"div\", null,\n                                React.createElement(\"span\", { className: \"chart-title\" }, \"Rating\"),\n                                React.createElement(BarChart, { name: \"Running\", stat: this.state.statistic.runningDistanceRating, percent: `${this.state.statistic.runningDistanceRating}%` })))))))));\n    }\n}\nexport default Statistic;\n",{"version":3,"file":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/components/Profile/Statistic.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/components/Profile/Statistic.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport axios from \"~/common/axiosConfigure.ts\";\nimport TimeInterval from \"~/components/Profile/TimeInterval\";\nimport \"./Statistic.scss\";\nimport Paper from \"@material-ui/core/Paper\";\nimport BarChart from \"~/components/Profile/BarChart\";\n\nexport interface StatisticType {\n    // general\n    activityTimeTotal: number;\n    activeDayTotal: number;\n    // running\n    runningDistanceTotal: number;\n    runningRank: string;\n    runningDistanceRating: number;\n    runningTimeTotal: number;\n    // cycling\n    cyclingDistanceTotal: number;\n    cyclingTimeTotal: number;\n    // gym\n    gymTimeTotal: number;\n    // meditation\n    meditationTimeTotal: number;\n    // climbing\n    climbingTimeTotal: number;\n    // skating\n    skatingTimeTotal: number;\n    // swimming\n    swimmingTimeTotal: number;\n    // yoga\n    yogaTimeTotal: number;\n    // hiking\n    hikingTimeTotal: number;\n}\ninterface StatisticState {\n    statistic: StatisticType | null;\n    interval?: string;\n    timeZoneOffset?: number;\n}\n\ninterface StatisticProps {\n    userId?: string;\n}\n\nclass Statistic extends React.Component<StatisticProps, StatisticState> {\n    constructor(props: StatisticProps) {\n        super(props);\n        const date = new Date();\n        this.state = {\n            statistic: null,\n            interval: \"\",\n            timeZoneOffset: date.getTimezoneOffset(),\n        };\n        this.updateData(\"0\");\n    }\n\n    componentDidMount(): void {\n        const url: string =\n            process.env.LOCAL_HOST_URL +\n            `/accounts/statistic/${this.props.userId}?timeinterval=0&timezoneoffset=${\n                this.state.timeZoneOffset\n            }`;\n        axios.get(url).then(response => {\n            this.setState({ statistic: response.data });\n        });\n    }\n\n    private updateData(index: string): void {\n        const tempInterval = index;\n        const url: string =\n            process.env.LOCAL_HOST_URL +\n            `/accounts/statistic/${this.props.userId}?timeinterval=${tempInterval}&timezoneoffset=${\n                this.state.timeZoneOffset\n            }`;\n        axios.get(url).then(response => {\n            this.setState({\n                statistic: response.data,\n                interval: tempInterval,\n            });\n        });\n    }\n\n    private calculateWidth = (time: number, totalTime: number) => {\n        return (time * 100) / totalTime + \"%\";\n    };\n\n    render(): React.ReactNode {\n        if (this.state.statistic == null) {\n            return <div />;\n        }\n        const distanceTotal =\n            this.state.statistic.runningDistanceTotal + this.state.statistic.cyclingDistanceTotal;\n        const timeTotal = parseFloat((this.state.statistic.activityTimeTotal / 3600).toFixed(2));\n        return (\n            <div>\n                <Paper style={{ backgroundColor: \"#f5eeee73\", height: \"fit-content\" }}>\n                    <div\n                        style={{\n                            textAlign: \"right\",\n                            paddingTop: \"10px\",\n                            paddingRight: \"10px\",\n                            paddingBottom: \"15px\",\n                        }}\n                    >\n                        <TimeInterval updateData={this.updateData.bind(this)} />\n                    </div>\n                    <div>\n                        <div className=\"general\">Total time: {timeTotal} hour(s)</div>\n                        <div className=\"general\">\n                            Total days: {this.state.statistic.activeDayTotal} day(s)\n                        </div>\n                        {this.state.statistic.runningRank !== \"-\" && (\n                            <div className=\"general\">\n                                Running rank: {this.state.statistic.runningRank}\n                            </div>\n                        )}\n                        <div>\n                            <div className=\"charts\">\n                                {/*Chart for distance*/}\n                                {distanceTotal !== 0.0 && (\n                                    <div>\n                                        <span className=\"chart-title\">Distance</span>\n                                        <div className=\"chart-horiz\">\n                                            <BarChart\n                                                name={\"Running\"}\n                                                stat={this.state.statistic.runningDistanceTotal}\n                                                percent={this.calculateWidth(\n                                                    this.state.statistic.runningDistanceTotal,\n                                                    distanceTotal,\n                                                )}\n                                            />\n                                            <BarChart\n                                                name={\"Cycling\"}\n                                                stat={this.state.statistic.cyclingDistanceTotal}\n                                                percent={this.calculateWidth(\n                                                    this.state.statistic.cyclingDistanceTotal,\n                                                    distanceTotal,\n                                                )}\n                                            />\n                                        </div>\n                                    </div>\n                                )}\n                                {/*Chart for time*/}\n                                {this.state.statistic.activityTimeTotal !== 0.0 && (\n                                    <div>\n                                        <span className=\"chart-title\">Time</span>\n                                        <BarChart\n                                            name={\"Running\"}\n                                            stat={parseFloat(\n                                                (\n                                                    this.state.statistic.runningTimeTotal / 3600\n                                                ).toFixed(2),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.runningTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                        <BarChart\n                                            name={\"Cycling\"}\n                                            stat={parseFloat(\n                                                (\n                                                    this.state.statistic.cyclingTimeTotal / 3600\n                                                ).toFixed(2),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.cyclingTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                        <BarChart\n                                            name={\"Yoga\"}\n                                            stat={parseFloat(\n                                                (this.state.statistic.yogaTimeTotal / 3600).toFixed(\n                                                    2,\n                                                ),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.yogaTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                        <BarChart\n                                            name={\"Hiking\"}\n                                            stat={parseFloat(\n                                                (\n                                                    this.state.statistic.hikingTimeTotal / 3600\n                                                ).toFixed(2),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.hikingTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                        <BarChart\n                                            name={\"Skating\"}\n                                            stat={parseFloat(\n                                                (\n                                                    this.state.statistic.skatingTimeTotal / 3600\n                                                ).toFixed(2),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.skatingTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                        <BarChart\n                                            name={\"Swimming\"}\n                                            stat={parseFloat(\n                                                (\n                                                    this.state.statistic.swimmingTimeTotal / 3600\n                                                ).toFixed(2),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.swimmingTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                        <BarChart\n                                            name={\"Gym\"}\n                                            stat={parseFloat(\n                                                (this.state.statistic.gymTimeTotal / 3600).toFixed(\n                                                    2,\n                                                ),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.gymTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                        <BarChart\n                                            name={\"Meditation\"}\n                                            stat={parseFloat(\n                                                (\n                                                    this.state.statistic.meditationTimeTotal / 3600\n                                                ).toFixed(2),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.meditationTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                        <BarChart\n                                            name={\"Climbing\"}\n                                            stat={parseFloat(\n                                                (\n                                                    this.state.statistic.climbingTimeTotal / 3600\n                                                ).toFixed(2),\n                                            )}\n                                            percent={this.calculateWidth(\n                                                this.state.statistic.climbingTimeTotal,\n                                                this.state.statistic.activityTimeTotal,\n                                            )}\n                                        />\n                                    </div>\n                                )}\n                                {/*Chart for rating*/}\n                                {this.state.statistic.runningDistanceRating !== 0.0 && (\n                                    <div>\n                                        <span className=\"chart-title\">Rating</span>\n                                        <BarChart\n                                            name={\"Running\"}\n                                            stat={this.state.statistic.runningDistanceRating}\n                                            percent={`${\n                                                this.state.statistic.runningDistanceRating\n                                            }%`}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </Paper>\n            </div>\n        );\n    }\n}\nexport default Statistic;\n"]}]}