{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/data/notification/actionCreators.ts","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/data/notification/actionCreators.ts","mtime":1532508138358},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import actionTypes from \"./actionTypes\";\n// this will be called when you start a request\nexport const competitorNotificationFetchRequested = () => ({\n    type: actionTypes.COMPETITOR_NOTIFICATION_FETCH_REQUESTED,\n});\n// this will be called when you get the data back\nexport const competitorNotificationFetchFulfilled = (competitors) => ({\n    type: actionTypes.COMPETITOR_NOTIFICATION_FETCH_FULFILLED,\n    payload: competitors,\n});\n// this will be called when you got some errors\nexport const competitorNotificationFetchRejected = (error) => ({\n    type: actionTypes.COMPETITOR_NOTIFICATION_FETCH_REJECTED,\n    payload: error,\n    error: true,\n});\nexport default {\n    competitorNotificationFetchRequested,\n    competitorNotificationFetchFulfilled,\n    competitorNotificationFetchRejected,\n};\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/data/notification/actionCreators.ts","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/data/notification/actionCreators.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,eAAe,CAAC;AAYxC,+CAA+C;AAC/C,MAAM,CAAC,MAAM,oCAAoC,GAAG,GAAG,EAAE,CAAC,CAAC;IACvD,IAAI,EAAE,WAAW,CAAC,uCAAuC;CAC5D,CAAC,CAAC;AACH,iDAAiD;AACjD,MAAM,CAAC,MAAM,oCAAoC,GAAG,CAAC,WAAwB,EAAE,EAAE,CAAC,CAAC;IAC/E,IAAI,EAAE,WAAW,CAAC,uCAAuC;IACzD,OAAO,EAAE,WAAW;CACvB,CAAC,CAAC;AACH,+CAA+C;AAC/C,MAAM,CAAC,MAAM,mCAAmC,GAAG,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC;IAChE,IAAI,EAAE,WAAW,CAAC,sCAAsC;IACxD,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,IAAI;CACd,CAAC,CAAC;AAEH,eAAe;IACX,oCAAoC;IACpC,oCAAoC;IACpC,mCAAmC;CACtC,CAAC","sourcesContent":["import actionTypes from \"./actionTypes\";\n// define action\n\nexport interface ICompetitor {\n    competitionNotificationId: string;\n    accountId: string;\n    imageLink: string;\n    fullName: string;\n    activityType: string;\n    competitionId: string;\n}\n\n// this will be called when you start a request\nexport const competitorNotificationFetchRequested = () => ({\n    type: actionTypes.COMPETITOR_NOTIFICATION_FETCH_REQUESTED,\n});\n// this will be called when you get the data back\nexport const competitorNotificationFetchFulfilled = (competitors: ICompetitor) => ({\n    type: actionTypes.COMPETITOR_NOTIFICATION_FETCH_FULFILLED,\n    payload: competitors,\n});\n// this will be called when you got some errors\nexport const competitorNotificationFetchRejected = (error: any) => ({\n    type: actionTypes.COMPETITOR_NOTIFICATION_FETCH_REJECTED,\n    payload: error,\n    error: true,\n});\n\nexport default {\n    competitorNotificationFetchRequested,\n    competitorNotificationFetchFulfilled,\n    competitorNotificationFetchRejected,\n};\n"]}]}