{"remainingRequest":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/Chat/Forum.tsx","dependencies":[{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/Chat/Forum.tsx","mtime":1535983606280},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport MessageList from \"./MesageList\";\nconst SockJS = require(\"sockjs-client\");\nimport * as Stomp from \"stompjs\";\nimport MessageBox from \"~/containers/Chat/MessageBox\";\nimport { connect } from \"react-redux\";\nimport axios from \"~/common/axiosConfigure\";\nimport Button from \"@material-ui/core/Button/Button\";\nconst styleShowUser = {\n    border: \"1px solid #015c7f\",\n    padding: \"0 30px\",\n    display: \"table\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    textColor: \"#015c7f\",\n};\nclass Forum extends React.Component {\n    constructor(props) {\n        super(props);\n        this.socket = new SockJS(process.env.SOCIAL_LOGIN_LOCAL_HOST_URL + `/socket`);\n        this.stompClient = Stomp.over(this.socket);\n        this.loadPreviousMessages = () => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const oldMessages = yield axios\n                .get(process.env.LOCAL_HOST_URL + `/chat/loadChat?teamId=${this.props.teamId}`)\n                .then(response => {\n                const list = response.data;\n                return list;\n            });\n            if (oldMessages.length > 0) {\n                this.setState({\n                    list: oldMessages,\n                    oldestMessage: oldMessages[0],\n                });\n            }\n            if (this.messagesEnd) {\n                this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n            }\n        });\n        this.loadHistory = () => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            let historyMessages = [];\n            if (!this.state.isLoadingButtonOpen) {\n                historyMessages = yield axios\n                    .post(process.env.LOCAL_HOST_URL + \"/chat/history\", this.state.oldestMessage)\n                    .then(response => {\n                    const list = response.data;\n                    return list;\n                });\n            }\n            this.setState({\n                isShowMore: true,\n                list: [...historyMessages, ...this.state.list],\n            });\n            this.setState({\n                oldestMessage: this.state.list[0],\n            });\n        });\n        this.handleLoadHistoryButtonClick = () => {\n            this.loadHistory();\n        };\n        this.sendMessage = (msg) => {\n            this.setState({\n                isShowMore: false,\n            });\n            const destination = `/app/chat.sendMessage.${this.props.teamId}`;\n            const date = new Date();\n            const messageContent = msg.trim();\n            if (messageContent && this.stompClient && this.props.currentUserId) {\n                const chatMsg = {\n                    content: msg,\n                    senderId: this.props.currentUserId.accountId,\n                    teamId: this.props.teamId,\n                    createdDate: date,\n                };\n                this.stompClient.send(destination, {}, JSON.stringify(chatMsg));\n            }\n            this.setState({ isShowMore: false });\n        };\n        this.state = {\n            list: [],\n            oldestMessage: {\n                senderId: \"\",\n                content: \"\",\n                teamId: this.props.teamId,\n                createdDate: new Date(),\n                fullName: \"\",\n                imageLink: \"\",\n            },\n            isLoadingButtonOpen: false,\n            isShowMore: false,\n        };\n    }\n    componentDidUpdate() {\n        if (!this.state.isShowMore) {\n            this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }\n    componentDidMount() {\n        this.loadPreviousMessages();\n        this.stompClient.connect({}, () => {\n            this.stompClient.subscribe(`/chat/${this.props.teamId}`, payload => {\n                const newMsg = JSON.parse(payload.body);\n                const tempMsg = {\n                    senderId: newMsg.senderId,\n                    content: newMsg.content,\n                    teamId: newMsg.teamId,\n                    createdDate: newMsg.createdDate,\n                    fullName: newMsg.fullName,\n                    imageLink: newMsg.imageLink,\n                };\n                const temp = this.state.list;\n                temp.push(tempMsg);\n                this.setState({ list: temp });\n            });\n        });\n    }\n    render() {\n        this.stompClient.debug = () => { };\n        if (!this.props.currentUserId) {\n            return React.createElement(\"div\", null);\n        }\n        return (React.createElement(\"div\", null,\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: \"content\", style: {\n                        overflow: \"auto\",\n                        marginTop: \"24px\",\n                        height: \"50vh\",\n                    } },\n                    React.createElement(Button, { onClick: this.handleLoadHistoryButtonClick, style: styleShowUser },\n                        React.createElement(\"span\", { style: { color: \"#015c7f\" } }, \"Show more\")),\n                    React.createElement(MessageList, { receivedMessage: this.state.list, currentUserId: this.props.currentUserId }),\n                    React.createElement(\"div\", { style: { float: \"left\", clear: \"both\" }, ref: el => {\n                            this.messagesEnd = el;\n                        } })),\n                React.createElement(\"div\", { className: \"footer\", style: {\n                        bottom: \"10px\",\n                        overflow: \"hidden\",\n                        width: \"100%\",\n                    } },\n                    React.createElement(MessageBox, { sendMessage: this.sendMessage })))));\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        currentUserId: state.currentUser.currentUser,\n    };\n};\nexport default connect(mapStateToProps, null)(Forum);\n",{"version":3,"file":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/Chat/Forum.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/Chat/Forum.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,WAAW,MAAM,cAAc,CAAC;AACvC,MAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACxC,OAAO,KAAK,KAAK,MAAM,SAAS,CAAC;AACjC,OAAO,UAAU,MAAM,8BAA8B,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,KAAK,MAAM,yBAAyB,CAAC;AAC5C,OAAO,MAAM,MAAM,iCAAiC,CAAC;AAwBrD,MAAM,aAAa,GAAG;IAClB,MAAM,EAAE,mBAAmB;IAC3B,OAAO,EAAE,QAAQ;IACjB,OAAO,EAAE,OAAO;IAChB,UAAU,EAAE,MAAM;IAClB,WAAW,EAAE,MAAM;IACnB,SAAS,EAAE,SAAS;CACvB,CAAC;AAEF,WAAY,SAAQ,KAAK,CAAC,SAA+B;IACrD,YAAY,KAAgB;QACxB,KAAK,CAAC,KAAK,CAAC,CAAC;QAgBT,WAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B,GAAG,SAAS,CAAC,CAAC;QACzE,gBAAW,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAStC,yBAAoB,GAAG,GAAwB,EAAE;YACrD,MAAM,WAAW,GAAkB,MAAM,KAAK;iBACzC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,yBAAyB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;iBAC9E,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACb,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;gBAC3B,OAAO,IAAI,CAAC;YAChB,CAAC,CAAC,CAAC;YAEP,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxB,IAAI,CAAC,QAAQ,CAAC;oBACV,IAAI,EAAE,WAAW;oBACjB,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC;iBAChC,CAAC,CAAC;aACN;YACD,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;aAC3D;QACL,CAAC,CAAA,CAAC;QAEM,gBAAW,GAAG,GAAwB,EAAE;YAC5C,IAAI,eAAe,GAAG,EAAE,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE;gBACjC,eAAe,GAAG,MAAM,KAAK;qBACxB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;qBAC5E,IAAI,CAAC,QAAQ,CAAC,EAAE;oBACb,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAC3B,OAAO,IAAI,CAAC;gBAChB,CAAC,CAAC,CAAC;aACV;YAED,IAAI,CAAC,QAAQ,CAAC;gBACV,UAAU,EAAE,IAAI;gBAChB,IAAI,EAAE,CAAC,GAAG,eAAe,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;aACjD,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC;gBACV,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;aACpC,CAAC,CAAC;QACP,CAAC,CAAA,CAAC;QAEM,iCAA4B,GAAG,GAAG,EAAE;YACxC,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC,CAAC;QAwBM,gBAAW,GAAG,CAAC,GAAW,EAAQ,EAAE;YACxC,IAAI,CAAC,QAAQ,CAAC;gBACV,UAAU,EAAE,KAAK;aACpB,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,yBAAyB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACjE,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACxB,MAAM,cAAc,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;YAClC,IAAI,cAAc,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBAChE,MAAM,OAAO,GAAG;oBACZ,OAAO,EAAE,GAAG;oBACZ,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS;oBAC5C,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;oBACzB,WAAW,EAAE,IAAI;iBACpB,CAAC;gBACF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;aACnE;YACD,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC;QA3GE,IAAI,CAAC,KAAK,GAAG;YACT,IAAI,EAAE,EAAE;YACR,aAAa,EAAE;gBACX,QAAQ,EAAE,EAAE;gBACZ,OAAO,EAAE,EAAE;gBACX,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;gBACzB,WAAW,EAAE,IAAI,IAAI,EAAE;gBACvB,QAAQ,EAAE,EAAE;gBACZ,SAAS,EAAE,EAAE;aAChB;YACD,mBAAmB,EAAE,KAAK;YAC1B,UAAU,EAAE,KAAK;SACpB,CAAC;IACN,CAAC;IAMD,kBAAkB;QACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YACxB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;SAC3D;IACL,CAAC;IA4CD,iBAAiB;QACb,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,WAAW,CAAC,OAAO,CACpB,EAAE,EACF,GAAG,EAAE;YACD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,EAAE;gBAC/D,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxC,MAAM,OAAO,GAAgB;oBACzB,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,OAAO,EAAE,MAAM,CAAC,OAAO;oBACvB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,WAAW,EAAE,MAAM,CAAC,WAAW;oBAC/B,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,SAAS,EAAE,MAAM,CAAC,SAAS;iBAC9B,CAAC;gBAEF,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACnB,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;QACP,CAAC,CACJ,CAAC;IACN,CAAC;IAoBD,MAAM;QACF,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;YAC3B,OAAO,gCAAO,CAAC;SAClB;QACD,OAAO,CACH;YACI;gBACI,6BACI,SAAS,EAAC,SAAS,EACnB,KAAK,EAAE;wBACH,QAAQ,EAAE,MAAM;wBAChB,SAAS,EAAE,MAAM;wBACjB,MAAM,EAAE,MAAM;qBACjB;oBAED,oBAAC,MAAM,IAAC,OAAO,EAAE,IAAI,CAAC,4BAA4B,EAAE,KAAK,EAAE,aAAa;wBACpE,8BAAM,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,gBAAkB,CAC9C;oBACT,oBAAC,WAAW,IACR,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAChC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,GACzC;oBACF,6BACI,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,EACvC,GAAG,EAAE,EAAE,CAAC,EAAE;4BACN,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;wBAC1B,CAAC,GACH,CACA;gBACN,6BACI,SAAS,EAAC,QAAQ,EAClB,KAAK,EAAE;wBACH,MAAM,EAAE,MAAM;wBACd,QAAQ,EAAE,QAAQ;wBAClB,KAAK,EAAE,MAAM;qBAChB;oBAED,oBAAC,UAAU,IAAC,WAAW,EAAE,IAAI,CAAC,WAAW,GAAI,CAC3C,CACJ,CACJ,CACT,CAAC;IACN,CAAC;CACJ;AACD,MAAM,eAAe,GAAG,CAAC,KAAU,EAAE,EAAE;IACnC,OAAO;QACH,aAAa,EAAE,KAAK,CAAC,WAAW,CAAC,WAAW;KAC/C,CAAC;AACN,CAAC,CAAC;AACF,eAAe,OAAO,CAClB,eAAe,EACf,IAAI,CACP,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import * as React from \"react\";\nimport MessageList from \"./MesageList\";\nconst SockJS = require(\"sockjs-client\");\nimport * as Stomp from \"stompjs\";\nimport MessageBox from \"~/containers/Chat/MessageBox\";\nimport { connect } from \"react-redux\";\nimport axios from \"~/common/axiosConfigure\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport { CurrentUser } from \"~/data/auth/actions\";\n\ninterface ChatProps {\n    currentUserId: CurrentUser;\n    teamId: string;\n}\n\nexport interface ChatMessage {\n    senderId: string;\n    content: string;\n    teamId: string;\n    createdDate: Date;\n    fullName: string;\n    imageLink: string;\n}\n\ninterface ChatState {\n    list: ChatMessage[];\n    oldestMessage: ChatMessage;\n    isLoadingButtonOpen: boolean;\n    isShowMore: boolean;\n}\n\nconst styleShowUser = {\n    border: \"1px solid #015c7f\",\n    padding: \"0 30px\",\n    display: \"table\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    textColor: \"#015c7f\",\n};\n\nclass Forum extends React.Component<ChatProps, ChatState> {\n    constructor(props: ChatProps) {\n        super(props);\n        this.state = {\n            list: [],\n            oldestMessage: {\n                senderId: \"\",\n                content: \"\",\n                teamId: this.props.teamId,\n                createdDate: new Date(),\n                fullName: \"\",\n                imageLink: \"\",\n            },\n            isLoadingButtonOpen: false,\n            isShowMore: false,\n        };\n    }\n\n    private socket = new SockJS(process.env.SOCIAL_LOGIN_LOCAL_HOST_URL + `/socket`);\n    private stompClient = Stomp.over(this.socket);\n    private messagesEnd: any;\n\n    componentDidUpdate(): void {\n        if (!this.state.isShowMore) {\n            this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }\n\n    private loadPreviousMessages = async (): Promise<void> => {\n        const oldMessages: ChatMessage[] = await axios\n            .get(process.env.LOCAL_HOST_URL + `/chat/loadChat?teamId=${this.props.teamId}`)\n            .then(response => {\n                const list = response.data;\n                return list;\n            });\n\n        if (oldMessages.length > 0) {\n            this.setState({\n                list: oldMessages,\n                oldestMessage: oldMessages[0],\n            });\n        }\n        if (this.messagesEnd) {\n            this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n        }\n    };\n\n    private loadHistory = async (): Promise<void> => {\n        let historyMessages = [];\n        if (!this.state.isLoadingButtonOpen) {\n            historyMessages = await axios\n                .post(process.env.LOCAL_HOST_URL + \"/chat/history\", this.state.oldestMessage)\n                .then(response => {\n                    const list = response.data;\n                    return list;\n                });\n        }\n\n        this.setState({\n            isShowMore: true,\n            list: [...historyMessages, ...this.state.list],\n        });\n        this.setState({\n            oldestMessage: this.state.list[0],\n        });\n    };\n\n    private handleLoadHistoryButtonClick = () => {\n        this.loadHistory();\n    };\n    componentDidMount(): void {\n        this.loadPreviousMessages();\n        this.stompClient.connect(\n            {},\n            () => {\n                this.stompClient.subscribe(`/chat/${this.props.teamId}`, payload => {\n                    const newMsg = JSON.parse(payload.body);\n                    const tempMsg: ChatMessage = {\n                        senderId: newMsg.senderId,\n                        content: newMsg.content,\n                        teamId: newMsg.teamId,\n                        createdDate: newMsg.createdDate,\n                        fullName: newMsg.fullName,\n                        imageLink: newMsg.imageLink,\n                    };\n\n                    const temp = this.state.list;\n                    temp.push(tempMsg);\n                    this.setState({ list: temp });\n                });\n            },\n        );\n    }\n    private sendMessage = (msg: string): void => {\n        this.setState({\n            isShowMore: false,\n        });\n        const destination = `/app/chat.sendMessage.${this.props.teamId}`;\n        const date = new Date();\n        const messageContent = msg.trim();\n        if (messageContent && this.stompClient && this.props.currentUserId) {\n            const chatMsg = {\n                content: msg,\n                senderId: this.props.currentUserId.accountId,\n                teamId: this.props.teamId,\n                createdDate: date,\n            };\n            this.stompClient.send(destination, {}, JSON.stringify(chatMsg));\n        }\n        this.setState({ isShowMore: false });\n    };\n\n    render() {\n        this.stompClient.debug = () => {};\n        if (!this.props.currentUserId) {\n            return <div />;\n        }\n        return (\n            <div>\n                <div>\n                    <div\n                        className=\"content\"\n                        style={{\n                            overflow: \"auto\",\n                            marginTop: \"24px\",\n                            height: \"50vh\",\n                        }}\n                    >\n                        <Button onClick={this.handleLoadHistoryButtonClick} style={styleShowUser}>\n                            <span style={{ color: \"#015c7f\" }}>Show more</span>\n                        </Button>\n                        <MessageList\n                            receivedMessage={this.state.list}\n                            currentUserId={this.props.currentUserId}\n                        />\n                        <div\n                            style={{ float: \"left\", clear: \"both\" }}\n                            ref={el => {\n                                this.messagesEnd = el;\n                            }}\n                        />\n                    </div>\n                    <div\n                        className=\"footer\"\n                        style={{\n                            bottom: \"10px\",\n                            overflow: \"hidden\",\n                            width: \"100%\",\n                        }}\n                    >\n                        <MessageBox sendMessage={this.sendMessage} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state: any) => {\n    return {\n        currentUserId: state.currentUser.currentUser,\n    };\n};\nexport default connect(\n    mapStateToProps,\n    null,\n)(Forum);\n"]}]}