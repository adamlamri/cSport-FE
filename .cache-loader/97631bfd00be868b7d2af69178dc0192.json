{"remainingRequest":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/containers/activity/list-card-activity.tsx","dependencies":[{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/containers/activity/list-card-activity.tsx","mtime":1532660069000},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1539584369385},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1539584369506},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport CardActivity from \"./card-activity\";\nimport axios from \"~/common/axiosConfigure\";\nimport { Grid, Typography, CircularProgress } from \"@material-ui/core\";\nimport ActivityModal from \"src/containers/activity/ActivityModal\";\nimport Activity from \"~/containers/activity/Activity\";\nimport { today } from \"src/common/util\";\nimport { connect } from \"react-redux\";\nimport { ConfirmDialog } from \"~/pages/competition/ConfirmDialog\";\nclass ActivityCardList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.setState({ isConfirmOpen: false });\n        };\n        this.handleConfirmDelete = () => {\n            axios.put(`/activities/softdelete?activityId=${this.state.idToDel}`).then(() => {\n                this.handleClose();\n                this.updateData();\n            });\n        };\n        // create ref object for modal\n        this.editModalRef = React.createRef();\n        this.state = {\n            isConfirmOpen: false,\n            idToDel: \"\",\n            data: null,\n            isDataFetched: false,\n            selectedRunActivity: {\n                activityId: \"\",\n                activityDate: today(),\n                distance: 0,\n                duration: 0,\n                location: \"\",\n                title: \"\",\n                activityType: \"\",\n                isActive: true,\n            },\n        };\n    }\n    deleteData(id) {\n        this.setState({ idToDel: id, isConfirmOpen: true });\n    }\n    editData(activity) {\n        if (this.editModalRef.current !== null) {\n            this.setState({\n                selectedRunActivity: activity,\n            });\n            this.editModalRef.current.handleClickOpen();\n        }\n    }\n    generateText(content) {\n        return (React.createElement(Typography, { style: {\n                textAlign: \"center\",\n                fontWeight: \"bold\",\n                color: \"#015C7F\",\n                fontSize: \"larger\",\n            }, component: \"h1\" }, content));\n    }\n    updateData() {\n        const userId = this.props.userId || this.props.currentUser.accountId;\n        axios\n            .get(\"/activities\", {\n            params: {\n                accountId: userId,\n            },\n        })\n            .then((response) => {\n            this.setState({\n                data: response.data.map((activity) => {\n                    // fix date error on IOS by replace space by T\n                    activity.activityDate = activity.activityDate.replace(\" \", \"T\");\n                    return activity;\n                }),\n            });\n        });\n        this.setState({\n            isDataFetched: true,\n        });\n    }\n    showLoading() {\n        return (React.createElement(\"div\", null,\n            React.createElement(CircularProgress, { size: 50, style: { marginLeft: \"48%\" } }),\n            this.generateText(\"Loading your activities...\")));\n    }\n    checkLoading() {\n        if (this.state.data) {\n            if (this.state.data.length === 0) {\n                return React.createElement(\"div\", null, this.generateText(\"NO ACTIVITIES FOUND\"));\n            }\n            return React.createElement(\"div\", null);\n        }\n        return this.showLoading();\n    }\n    render() {\n        if (!this.state.isDataFetched) {\n            if (this.props.currentUser) {\n                this.updateData();\n            }\n            return this.showLoading();\n        }\n        return (React.createElement(\"div\", null,\n            this.checkLoading(),\n            !this.props.userId ? (React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: { position: \"fixed\", bottom: 20, right: 30 } },\n                    React.createElement(ActivityModal, { label: \"Add Activity\", icon: \"AddIcon\", ref: this.editModalRef, updateTableData: this.updateData.bind(this), userId: this.props.currentUser ? this.props.currentUser.accountId : \"\" })),\n                React.createElement(ActivityModal, { label: \"Edit Activity\", icon: \"EditIcon\", activity: new Activity(this.state.selectedRunActivity), ref: this.editModalRef, updateTableData: this.updateData.bind(this), userId: this.props.currentUser ? this.props.currentUser.accountId : \"\" }),\n                React.createElement(Grid, { container: true }, this.state.data &&\n                    this.state.data.map((dataPerCard) => {\n                        return (React.createElement(Grid, { item: true, key: dataPerCard.activityId, xs: 12, sm: 6, md: 4, lg: 3 },\n                            React.createElement(CardActivity, { key: dataPerCard.activityId, data: dataPerCard, delete: this.deleteData.bind(this), edit: this.editData.bind(this) })));\n                    })))) : (React.createElement(\"div\", null,\n                React.createElement(Grid, { container: true }, this.state.data &&\n                    this.state.data.map((dataPerCard) => {\n                        return (React.createElement(Grid, { key: dataPerCard.activityId, xs: 12, sm: 6, md: 4, lg: 3 },\n                            React.createElement(CardActivity, { data: dataPerCard, delete: () => { }, edit: () => { } })));\n                    })))),\n            React.createElement(ConfirmDialog, { open: this.state.isConfirmOpen, close: this.handleClose, imgLink: require(\"../../theme/images/surrender.jpg\"), title: \"Do you want to delete this activity?\", content: \"You cannot undo after deleted\", confirm: this.handleConfirmDelete })));\n    }\n}\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state) => {\n    return {\n        currentUser: state.currentUser.currentUser,\n    };\n};\nexport default connect(mapStateToProps, null)(ActivityCardList);\n",{"version":3,"file":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/containers/activity/list-card-activity.tsx","sourceRoot":"","sources":["/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/containers/activity/list-card-activity.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,YAAY,MAAM,iBAAiB,CAAC;AAE3C,OAAO,KAAK,MAAM,yBAAyB,CAAC;AAC5C,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACvE,OAAO,aAAa,MAAM,uCAAuC,CAAC;AAElE,OAAO,QAAQ,MAAM,gCAAgC,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAC;AACxC,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,aAAa,EAAE,MAAM,mCAAmC,CAAC;AAiBlE,sBAAuB,SAAQ,KAAK,CAAC,SAAoC;IAErE,YAAY,KAAgB;QACxB,KAAK,CAAC,KAAK,CAAC,CAAC;QAsBT,gBAAW,GAAG,GAAS,EAAE;YAC7B,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC;QAMM,wBAAmB,GAAG,GAAG,EAAE;YAC/B,KAAK,CAAC,GAAG,CAAC,qCAAqC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC3E,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QAlCE,8BAA8B;QAC9B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,EAAiB,CAAC;QAErD,IAAI,CAAC,KAAK,GAAG;YACT,aAAa,EAAE,KAAK;YACpB,OAAO,EAAE,EAAE;YACX,IAAI,EAAE,IAAI;YACV,aAAa,EAAE,KAAK;YACpB,mBAAmB,EAAE;gBACjB,UAAU,EAAE,EAAE;gBACd,YAAY,EAAE,KAAK,EAAE;gBACrB,QAAQ,EAAE,CAAC;gBACX,QAAQ,EAAE,CAAC;gBACX,QAAQ,EAAE,EAAE;gBACZ,KAAK,EAAE,EAAE;gBACT,YAAY,EAAE,EAAE;gBAChB,QAAQ,EAAE,IAAI;aACjB;SACJ,CAAC;IACN,CAAC;IAMM,UAAU,CAAC,EAAmB;QACjC,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,CAAC;IASM,QAAQ,CAAC,QAA2B;QACvC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,KAAK,IAAI,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC;gBACV,mBAAmB,EAAE,QAAQ;aAChC,CAAC,CAAC;YACH,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;SAC/C;IACL,CAAC;IAEO,YAAY,CAAC,OAAe;QAChC,OAAO,CACH,oBAAC,UAAU,IACP,KAAK,EAAE;gBACH,SAAS,EAAE,QAAQ;gBACnB,UAAU,EAAE,MAAM;gBAClB,KAAK,EAAE,SAAS;gBAChB,QAAQ,EAAE,QAAQ;aACrB,EACD,SAAS,EAAC,IAAI,IAEb,OAAO,CACC,CAChB,CAAC;IACN,CAAC;IAEM,UAAU;QACb,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC;QACrE,KAAK;aACA,GAAG,CAAC,aAAa,EAAE;YAChB,MAAM,EAAE;gBACJ,SAAS,EAAE,MAAM;aACpB;SACJ,CAAC;aACD,IAAI,CAAC,CAAC,QAA4C,EAAE,EAAE;YACnD,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAA2B,EAAE,EAAE;oBACpD,8CAA8C;oBAC9C,QAAQ,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBAChE,OAAO,QAAQ,CAAC;gBACpB,CAAC,CAAC;aACL,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,QAAQ,CAAC;YACV,aAAa,EAAE,IAAI;SACtB,CAAC,CAAC;IACP,CAAC;IAEO,WAAW;QACf,OAAO,CACH;YACI,oBAAC,gBAAgB,IAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,GAAI;YAC3D,IAAI,CAAC,YAAY,CAAC,4BAA4B,CAAC,CAC9C,CACT,CAAC;IACN,CAAC;IAEO,YAAY;QAChB,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACjB,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,OAAO,iCAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAO,CAAC;aAChE;YACD,OAAO,gCAAO,CAAC;SAClB;QACD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM;QACF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;YAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;gBACxB,IAAI,CAAC,UAAU,EAAE,CAAC;aACrB;YACD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;SAC7B;QAED,OAAO,CACH;YACK,IAAI,CAAC,YAAY,EAAE;YACnB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAClB;gBACI,6BAAK,KAAK,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;oBACpD,oBAAC,aAAa,IACV,KAAK,EAAE,cAAc,EACrB,IAAI,EAAE,SAAS,EACf,GAAG,EAAE,IAAI,CAAC,YAAY,EACtB,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAC3C,MAAM,EACF,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAEpE,CACA;gBACN,oBAAC,aAAa,IACV,KAAK,EAAE,eAAe,EACtB,IAAI,EAAE,UAAU,EAChB,QAAQ,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EACtD,GAAG,EAAE,IAAI,CAAC,YAAY,EACtB,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAC3C,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GACxE;gBACF,oBAAC,IAAI,IAAC,SAAS,UACV,IAAI,CAAC,KAAK,CAAC,IAAI;oBACZ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAA8B,EAAE,EAAE;wBACnD,OAAO,CACH,oBAAC,IAAI,IACD,IAAI,QACJ,GAAG,EAAE,WAAW,CAAC,UAAU,EAC3B,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,CAAC;4BAEL,oBAAC,YAAY,IACT,GAAG,EAAE,WAAW,CAAC,UAAU,EAC3B,IAAI,EAAE,WAAW,EACjB,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAClC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAChC,CACC,CACV,CAAC;oBACN,CAAC,CAAC,CACH,CACL,CACT,CAAC,CAAC,CAAC,CACA;gBACI,oBAAC,IAAI,IAAC,SAAS,UACV,IAAI,CAAC,KAAK,CAAC,IAAI;oBACZ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAA8B,EAAE,EAAE;wBACnD,OAAO,CACH,oBAAC,IAAI,IACD,GAAG,EAAE,WAAW,CAAC,UAAU,EAC3B,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,CAAC;4BAEL,oBAAC,YAAY,IACT,IAAI,EAAE,WAAW,EACjB,MAAM,EAAE,GAAG,EAAE,GAAE,CAAC,EAChB,IAAI,EAAE,GAAG,EAAE,GAAE,CAAC,GAChB,CACC,CACV,CAAC;oBACN,CAAC,CAAC,CACH,CACL,CACT;YACD,oBAAC,aAAa,IACV,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EAC9B,KAAK,EAAE,IAAI,CAAC,WAAW,EACvB,OAAO,EAAE,OAAO,CAAC,kCAAkC,CAAC,EACpD,KAAK,EAAE,sCAAsC,EAC7C,OAAO,EAAE,+BAA+B,EACxC,OAAO,EAAE,IAAI,CAAC,mBAAmB,GACnC,CACA,CACT,CAAC;IACN,CAAC;CACJ;AAED,+EAA+E;AAC/E,MAAM,eAAe,GAAG,CAAC,KAAU,EAAE,EAAE;IACnC,OAAO;QACH,WAAW,EAAE,KAAK,CAAC,WAAW,CAAC,WAAW;KAC7C,CAAC;AACN,CAAC,CAAC;AAEF,eAAe,OAAO,CAClB,eAAe,EACf,IAAI,CACP,CAAC,gBAAgB,CAAC,CAAC","sourcesContent":["import * as React from \"react\";\nimport CardActivity from \"./card-activity\";\nimport { AxiosResponse } from \"axios\";\nimport axios from \"~/common/axiosConfigure\";\nimport { Grid, Typography, CircularProgress } from \"@material-ui/core\";\nimport ActivityModal from \"src/containers/activity/ActivityModal\";\nimport ActivityInterface from \"./ActivityInterface\";\nimport Activity from \"~/containers/activity/Activity\";\nimport { today } from \"src/common/util\";\nimport { connect } from \"react-redux\";\nimport { ConfirmDialog } from \"~/pages/competition/ConfirmDialog\";\n\ninterface TableDataTypes {\n    data: ActivityInterface[] | null;\n    selectedRunActivity: ActivityInterface;\n    isConfirmOpen: boolean;\n    idToDel: string | number;\n    isDataFetched: boolean;\n}\n\ninterface PropTypes {\n    userId: string;\n    currentUser: {\n        accountId: string;\n    };\n}\n\nclass ActivityCardList extends React.Component<PropTypes, TableDataTypes> {\n    private readonly editModalRef: React.RefObject<ActivityModal>;\n    constructor(props: PropTypes) {\n        super(props);\n        // create ref object for modal\n        this.editModalRef = React.createRef<ActivityModal>();\n\n        this.state = {\n            isConfirmOpen: false,\n            idToDel: \"\",\n            data: null,\n            isDataFetched: false,\n            selectedRunActivity: {\n                activityId: \"\",\n                activityDate: today(),\n                distance: 0,\n                duration: 0,\n                location: \"\",\n                title: \"\",\n                activityType: \"\",\n                isActive: true,\n            },\n        };\n    }\n\n    private handleClose = (): void => {\n        this.setState({ isConfirmOpen: false });\n    };\n\n    public deleteData(id: string | number): void {\n        this.setState({ idToDel: id, isConfirmOpen: true });\n    }\n\n    private handleConfirmDelete = () => {\n        axios.put(`/activities/softdelete?activityId=${this.state.idToDel}`).then(() => {\n            this.handleClose();\n            this.updateData();\n        });\n    };\n\n    public editData(activity: ActivityInterface): void {\n        if (this.editModalRef.current !== null) {\n            this.setState({\n                selectedRunActivity: activity,\n            });\n            this.editModalRef.current.handleClickOpen();\n        }\n    }\n\n    private generateText(content: string): JSX.Element {\n        return (\n            <Typography\n                style={{\n                    textAlign: \"center\",\n                    fontWeight: \"bold\",\n                    color: \"#015C7F\",\n                    fontSize: \"larger\",\n                }}\n                component=\"h1\"\n            >\n                {content}\n            </Typography>\n        );\n    }\n\n    public updateData(): void {\n        const userId = this.props.userId || this.props.currentUser.accountId;\n        axios\n            .get(\"/activities\", {\n                params: {\n                    accountId: userId,\n                },\n            })\n            .then((response: AxiosResponse<ActivityInterface[]>) => {\n                this.setState({\n                    data: response.data.map((activity: ActivityInterface) => {\n                        // fix date error on IOS by replace space by T\n                        activity.activityDate = activity.activityDate.replace(\" \", \"T\");\n                        return activity;\n                    }),\n                });\n            });\n\n        this.setState({\n            isDataFetched: true,\n        });\n    }\n\n    private showLoading(): JSX.Element {\n        return (\n            <div>\n                <CircularProgress size={50} style={{ marginLeft: \"48%\" }} />\n                {this.generateText(\"Loading your activities...\")}\n            </div>\n        );\n    }\n\n    private checkLoading(): JSX.Element {\n        if (this.state.data) {\n            if (this.state.data.length === 0) {\n                return <div>{this.generateText(\"NO ACTIVITIES FOUND\")}</div>;\n            }\n            return <div />;\n        }\n        return this.showLoading();\n    }\n\n    render(): React.ReactNode {\n        if (!this.state.isDataFetched) {\n            if (this.props.currentUser) {\n                this.updateData();\n            }\n            return this.showLoading();\n        }\n\n        return (\n            <div>\n                {this.checkLoading()}\n                {!this.props.userId ? (\n                    <div>\n                        <div style={{ position: \"fixed\", bottom: 20, right: 30 }}>\n                            <ActivityModal\n                                label={\"Add Activity\"}\n                                icon={\"AddIcon\"}\n                                ref={this.editModalRef}\n                                updateTableData={this.updateData.bind(this)}\n                                userId={\n                                    this.props.currentUser ? this.props.currentUser.accountId : \"\"\n                                }\n                            />\n                        </div>\n                        <ActivityModal\n                            label={\"Edit Activity\"}\n                            icon={\"EditIcon\"}\n                            activity={new Activity(this.state.selectedRunActivity)}\n                            ref={this.editModalRef}\n                            updateTableData={this.updateData.bind(this)}\n                            userId={this.props.currentUser ? this.props.currentUser.accountId : \"\"}\n                        />\n                        <Grid container>\n                            {this.state.data &&\n                                this.state.data.map((dataPerCard: ActivityInterface) => {\n                                    return (\n                                        <Grid\n                                            item\n                                            key={dataPerCard.activityId}\n                                            xs={12}\n                                            sm={6}\n                                            md={4}\n                                            lg={3}\n                                        >\n                                            <CardActivity\n                                                key={dataPerCard.activityId}\n                                                data={dataPerCard}\n                                                delete={this.deleteData.bind(this)}\n                                                edit={this.editData.bind(this)}\n                                            />\n                                        </Grid>\n                                    );\n                                })}\n                        </Grid>\n                    </div>\n                ) : (\n                    <div>\n                        <Grid container>\n                            {this.state.data &&\n                                this.state.data.map((dataPerCard: ActivityInterface) => {\n                                    return (\n                                        <Grid\n                                            key={dataPerCard.activityId}\n                                            xs={12}\n                                            sm={6}\n                                            md={4}\n                                            lg={3}\n                                        >\n                                            <CardActivity\n                                                data={dataPerCard}\n                                                delete={() => {}}\n                                                edit={() => {}}\n                                            />\n                                        </Grid>\n                                    );\n                                })}\n                        </Grid>\n                    </div>\n                )}\n                <ConfirmDialog\n                    open={this.state.isConfirmOpen}\n                    close={this.handleClose}\n                    imgLink={require(\"../../theme/images/surrender.jpg\")}\n                    title={\"Do you want to delete this activity?\"}\n                    content={\"You cannot undo after deleted\"}\n                    confirm={this.handleConfirmDelete}\n                />\n            </div>\n        );\n    }\n}\n\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state: any) => {\n    return {\n        currentUser: state.currentUser.currentUser,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    null,\n)(ActivityCardList);\n"]}]}