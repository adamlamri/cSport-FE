{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/activity/ActivityForm.tsx","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/activity/ActivityForm.tsx","mtime":1532677259158},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport { withFormik } from \"formik\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport axios from \"~/common/axiosConfigure\";\nimport Activity from \"./Activity\";\nimport { getHourMin, getSeconds } from \"./ActivityFormHelper\";\nimport { activityError } from \"./ActivityError\";\nimport { getDateInString, isAPositiveNumber } from \"~/common/util\";\nimport { SnackbarType } from \"~/containers/snackbar/SnackbarType\";\nimport AutocompleteTextField from \"./../../components/textField/autocomplete-text-field\";\nimport { getActivityTypeIcon, isGymActivity, isActivityTypeHasDistance, isClimbingActivity, } from \"./ActivityType\";\nimport Timer from \"~/containers/activity/timer/Timer\";\nimport \"./modalStyle.css\";\nexport var TextFieldId;\n(function (TextFieldId) {\n    TextFieldId[\"Activity\"] = \"activityId\";\n    TextFieldId[\"DateTime\"] = \"dateTimeId\";\n    TextFieldId[\"Distance\"] = \"distanceId\";\n    TextFieldId[\"Duration\"] = \"durationId\";\n    TextFieldId[\"Location\"] = \"locationId\";\n    TextFieldId[\"ActivityType\"] = \"activityTypeId\";\n    TextFieldId[\"WorkoutType\"] = \"workoutTypeId\";\n    TextFieldId[\"Photo\"] = \"photoId\";\n})(TextFieldId || (TextFieldId = {}));\nconst InnerForm = (props) => {\n    const { touched, errors, isSubmitting, handleChange, values, handleSubmit, setFieldValue, } = props;\n    const AutoCompleteProps = {\n        TextFieldProps: {\n            id: TextFieldId.Location,\n            label: \"Location\",\n            error: touched.locationId && errors.locationId,\n            helperText: errors.locationId,\n            onChange: handleChange,\n            InputLabelProps: {\n                shrink: true,\n            },\n            fullWidth: true,\n        },\n        inputProps: {\n            onChange: handleChange,\n            value: values.locationId,\n            setClickedValue: setFieldValue,\n        },\n    };\n    const showOptions = values.activityOptions.map((element, index) => {\n        return (React.createElement(MenuItem, { key: index, value: element },\n            React.createElement(\"img\", { className: \"option-icon\", src: getActivityTypeIcon(element) }),\n            element));\n    });\n    const showDependentField = () => {\n        let field = null;\n        const type = values.activityTypeId;\n        if (isGymActivity(type)) {\n            field = (React.createElement(TextField, { id: TextFieldId.WorkoutType, label: \"Workout Type\", type: \"text\", defaultValue: values.workoutTypeId, onChange: handleChange, InputLabelProps: {\n                    shrink: true,\n                }, fullWidth: true }));\n        }\n        else if (isActivityTypeHasDistance(type)) {\n            values.distanceId = values.distanceId === \"0\" ? \"\" : values.distanceId;\n            field = (React.createElement(TextField, { id: TextFieldId.Distance, label: \"Distance\", type: \"number\", InputProps: {\n                    inputProps: {\n                        step: \"0.001\",\n                    },\n                    endAdornment: (React.createElement(InputAdornment, { position: \"end\" }, isClimbingActivity(values.activityTypeId) ? \"m\" : \"Km\")),\n                }, defaultValue: values.distanceId, error: touched.distanceId && errors.distanceId !== undefined, helperText: errors.distanceId, onChange: handleChange, InputLabelProps: {\n                    shrink: true,\n                }, fullWidth: true }));\n        }\n        return field;\n    };\n    return (React.createElement(\"form\", { className: \"modal-form\", onSubmit: handleSubmit, encType: \"multipart/form-data\" },\n        React.createElement(Hidden, { xlDown: true },\n            React.createElement(TextField, { id: TextFieldId.Activity, label: \"ID\", value: values.activityId, onChange: handleChange, fullWidth: true, disabled: true })),\n        React.createElement(\"p\", { className: errors.activityTypeId && touched.activityTypeId\n                ? \"custom-label-error\"\n                : \"custom-label\" }, \"Activity Type\"),\n        React.createElement(Select, { name: TextFieldId.ActivityType, onChange: handleChange, value: values.activityTypeId, disabled: values.formType === \"Edit\", fullWidth: true },\n            React.createElement(MenuItem, { value: \"\" },\n                React.createElement(\"em\", null, \"None\")),\n            showOptions),\n        errors.activityTypeId && touched.activityTypeId ? (React.createElement(\"p\", { className: \"error-type\" }, errors.activityTypeId)) : null,\n        React.createElement(TextField, { id: TextFieldId.DateTime, label: \"Date and Time\", type: \"datetime-local\", defaultValue: values.dateTimeId, error: touched.dateTimeId && errors.dateTimeId !== undefined, helperText: errors.dateTimeId, onChange: handleChange, InputLabelProps: {\n                shrink: true,\n            }, fullWidth: true }),\n        showDependentField(),\n        React.createElement(Timer, { id: TextFieldId.Duration, setFieldValue: setFieldValue, label: \"Duration\", defaultValue: values.durationId, error: touched.durationId && errors.durationId !== undefined, helperText: errors.durationId }),\n        React.createElement(AutocompleteTextField, Object.assign({}, AutoCompleteProps)),\n        React.createElement(TextField, { id: TextFieldId.Photo, type: \"file\", label: \"Photo\", error: touched.photoId && errors.photoId !== undefined, helperText: errors.photoId, onChange: handleChange, InputLabelProps: {\n                shrink: true,\n            }, fullWidth: true }),\n        React.createElement(\"div\", null,\n            React.createElement(Button, { type: \"submit\", disabled: isSubmitting, color: \"primary\" }, \"Submit\"),\n            React.createElement(Button, { onClick: values.handleClose, color: \"primary\" }, \"Cancel\"))));\n};\nconst responseMsg = {\n    addSuccess: \"Add new activity successful\",\n    addFail: \"Add activity fail!\",\n    updateSuccess: \"Update activity successful\",\n    updateFail: \"Update activity fail!\",\n};\nfunction isImageTypeValid(type) {\n    const ftype = type.toLowerCase();\n    return ftype.includes(\"jpg\") || ftype.includes(\"png\") || ftype.includes(\"jpeg\");\n}\n// Wrap our form with the using withFormik HoC\nconst ActivityForm = withFormik({\n    // Transform outer props into form values\n    mapPropsToValues: props => {\n        const activity = props.activity === undefined ? new Activity() : props.activity;\n        // This function will make sure that the system is working well for some activities that don't have the distance.\n        const getDistance = () => {\n            let distance = \"\";\n            if (activity.distance) {\n                distance = activity.distance.toString();\n            }\n            return distance;\n        };\n        return {\n            activityId: activity.activityId || \"0\",\n            dateTimeId: getDateInString(activity.activityDate) || \"\",\n            distanceId: getDistance(),\n            workoutTypeId: activity.workoutType || \"\",\n            durationId: getHourMin(activity.duration) || \"\",\n            locationId: activity.location || \"\",\n            handleCancel: props.handleCancel,\n            handleClose: props.handleClose,\n            formType: props.formType,\n            activityTypeId: activity.activityType || \"\",\n            activityOptions: props.activityOptions || [],\n            photoId: \"\",\n            isSnackOpen: false,\n            snackType: SnackbarType.Success,\n            snackMsg: \"\",\n            userId: props.userId,\n        };\n    },\n    validate: (values) => {\n        const errors = {};\n        // Validate activity type\n        if (!values.activityTypeId) {\n            errors.activityTypeId = activityError.activityTypeEmptyError;\n        }\n        // Validate duration\n        if (!isAPositiveNumber(values.durationId)) {\n            errors.durationId = activityError.durationEmptyError;\n        }\n        // Validate date time\n        if (!values.dateTimeId) {\n            errors.dateTimeId = activityError.dateTimeEmptyError;\n        }\n        // Validate distance if the activity is running or cycling\n        if ((!values.distanceId || values.distanceId === \"0\") &&\n            values.activityTypeId &&\n            isActivityTypeHasDistance(values.activityTypeId)) {\n            errors.distanceId = activityError.distanceEmptyError;\n        }\n        else {\n            const distance = Number(values.distanceId);\n            if (distance < 0) {\n                errors.distanceId = activityError.distanceNegativeError;\n            }\n        }\n        // Validate the image if it's not null\n        const fileList = document.getElementById(TextFieldId.Photo).files;\n        if (fileList && fileList.length > 0) {\n            const file = fileList[0];\n            if (file.size > 5242880 /* = 5MB */) {\n                errors.photoId = activityError.imageSizeError;\n            }\n            if (!isImageTypeValid(file.type)) {\n                errors.photoId = activityError.imageFileTypeError;\n            }\n        }\n        return errors;\n    },\n    handleSubmit: (values, { setSubmitting }) => {\n        const activity = {\n            activityId: values.activityId,\n            accountId: values.userId,\n            title: values.activityTypeId + \" Activity\",\n            activityType: values.activityTypeId,\n            location: values.locationId,\n            distance: values.distanceId,\n            workoutType: values.workoutTypeId,\n            duration: \"\" + getSeconds(values.durationId),\n            activityDate: values.dateTimeId.replace(\"T\", \" \") + \":00\",\n        };\n        const data = new FormData();\n        const blobStr = new Blob([JSON.stringify(activity)], { type: \"application/json\" });\n        data.append(\"activity\", blobStr);\n        // Get the file from form\n        const fileList = document.getElementById(TextFieldId.Photo).files;\n        if (fileList && fileList.length > 0) {\n            data.append(\"activityImage\", fileList[0]);\n        }\n        const method = values.formType === \"AddNew\" ? \"POST\" : \"PUT\";\n        // Send a request\n        axios({\n            method,\n            data,\n            url: \"/activities\",\n        })\n            .then(response => {\n            if (response.status === 201 || response.status === 200) {\n                const msg = values.formType === \"AddNew\"\n                    ? responseMsg.addSuccess\n                    : responseMsg.updateSuccess;\n                values.handleCancel(true, SnackbarType.Success, msg);\n            }\n        })\n            .catch(() => {\n            const msg = values.formType === \"AddNew\" ? responseMsg.addFail : responseMsg.updateFail;\n            values.handleCancel(true, SnackbarType.Error, msg);\n        });\n        setSubmitting(true);\n    },\n})(InnerForm);\nexport default ActivityForm;\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/activity/ActivityForm.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/activity/ActivityForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { FormikErrors, FormikProps, withFormik } from \"formik\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport axios from \"~/common/axiosConfigure\";\nimport Activity from \"./Activity\";\nimport { getHourMin, getSeconds } from \"./ActivityFormHelper\";\nimport { activityError } from \"./ActivityError\";\nimport { getDateInString, isAPositiveNumber } from \"~/common/util\";\nimport { SnackbarType } from \"~/containers/snackbar/SnackbarType\";\nimport AutocompleteTextField from \"./../../components/textField/autocomplete-text-field\";\nimport {\n    getActivityTypeIcon,\n    isGymActivity,\n    isActivityTypeHasDistance,\n    isClimbingActivity,\n} from \"./ActivityType\";\nimport Timer from \"~/containers/activity/timer/Timer\";\nimport \"./modalStyle.css\";\n\nexport enum TextFieldId {\n    Activity = \"activityId\",\n    DateTime = \"dateTimeId\",\n    Distance = \"distanceId\",\n    Duration = \"durationId\",\n    Location = \"locationId\",\n    ActivityType = \"activityTypeId\",\n    WorkoutType = \"workoutTypeId\",\n    Photo = \"photoId\",\n}\n\n// Shape of form values\ninterface ActivityFormValues {\n    activityId: string;\n    dateTimeId: string;\n    distanceId: string;\n    workoutTypeId: string;\n    durationId: string;\n    locationId: string;\n    activityTypeId: string;\n    activityOptions: string[];\n    photoId: string;\n    userId: string;\n}\n\ninterface ExtProps {\n    handleCancel(openSnack: boolean, snackType: SnackbarType, msg: string): void;\n    handleClose(): void;\n    formType: \"AddNew\" | \"Edit\";\n}\n\nconst InnerForm = (\n    props: FormikProps<ExtProps & ActivityFormValues>,\n): React.ReactElement<ActivityFormProps> => {\n    const {\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        values,\n        handleSubmit,\n        setFieldValue,\n    } = props;\n    const AutoCompleteProps = {\n        TextFieldProps: {\n            id: TextFieldId.Location,\n            label: \"Location\",\n            error: touched.locationId && errors.locationId,\n            helperText: errors.locationId,\n            onChange: handleChange,\n            InputLabelProps: {\n                shrink: true,\n            },\n            fullWidth: true,\n        },\n        inputProps: {\n            onChange: handleChange,\n            value: values.locationId,\n            setClickedValue: setFieldValue,\n        },\n    };\n\n    const showOptions: JSX.Element[] = values.activityOptions.map((element: string, index) => {\n        return (\n            <MenuItem key={index} value={element}>\n                <img className={\"option-icon\"} src={getActivityTypeIcon(element)} />\n                {element}\n            </MenuItem>\n        );\n    });\n    const showDependentField = () => {\n        let field: any = null;\n        const type = values.activityTypeId;\n        if (isGymActivity(type)) {\n            field = (\n                <TextField\n                    id={TextFieldId.WorkoutType}\n                    label={\"Workout Type\"}\n                    type={\"text\"}\n                    defaultValue={values.workoutTypeId}\n                    onChange={handleChange}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    fullWidth\n                />\n            );\n        } else if (isActivityTypeHasDistance(type)) {\n            values.distanceId = values.distanceId === \"0\" ? \"\" : values.distanceId;\n            field = (\n                <TextField\n                    id={TextFieldId.Distance}\n                    label={\"Distance\"}\n                    type={\"number\"}\n                    InputProps={{\n                        inputProps: {\n                            step: \"0.001\",\n                        },\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                {isClimbingActivity(values.activityTypeId) ? \"m\" : \"Km\"}\n                            </InputAdornment>\n                        ),\n                    }}\n                    defaultValue={values.distanceId}\n                    error={touched.distanceId && errors.distanceId !== undefined}\n                    helperText={errors.distanceId}\n                    onChange={handleChange}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    fullWidth\n                />\n            );\n        }\n        return field;\n    };\n\n    return (\n        <form className={\"modal-form\"} onSubmit={handleSubmit} encType={\"multipart/form-data\"}>\n            <Hidden xlDown>\n                <TextField\n                    id={TextFieldId.Activity}\n                    label={\"ID\"}\n                    value={values.activityId}\n                    onChange={handleChange}\n                    fullWidth\n                    disabled\n                />\n            </Hidden>\n            <p\n                className={\n                    errors.activityTypeId && touched.activityTypeId\n                        ? \"custom-label-error\"\n                        : \"custom-label\"\n                }\n            >\n                Activity Type\n            </p>\n            <Select\n                name={TextFieldId.ActivityType}\n                onChange={handleChange}\n                value={values.activityTypeId}\n                disabled={values.formType === \"Edit\"}\n                fullWidth\n            >\n                <MenuItem value=\"\">\n                    <em>None</em>\n                </MenuItem>\n                {showOptions}\n            </Select>\n            {errors.activityTypeId && touched.activityTypeId ? (\n                <p className={\"error-type\"}>{errors.activityTypeId}</p>\n            ) : null}\n            <TextField\n                id={TextFieldId.DateTime}\n                label={\"Date and Time\"}\n                type={\"datetime-local\"}\n                defaultValue={values.dateTimeId}\n                error={touched.dateTimeId && errors.dateTimeId !== undefined}\n                helperText={errors.dateTimeId}\n                onChange={handleChange}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                fullWidth\n            />\n            {showDependentField()}\n            <Timer\n                id={TextFieldId.Duration}\n                setFieldValue={setFieldValue}\n                label={\"Duration\"}\n                defaultValue={values.durationId}\n                error={touched.durationId && errors.durationId !== undefined}\n                helperText={errors.durationId}\n            />\n            <AutocompleteTextField {...AutoCompleteProps} />\n            <TextField\n                id={TextFieldId.Photo}\n                type={\"file\"}\n                label={\"Photo\"}\n                error={touched.photoId && errors.photoId !== undefined}\n                helperText={errors.photoId}\n                onChange={handleChange}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                fullWidth\n            />\n            <div>\n                <Button type={\"submit\"} disabled={isSubmitting} color=\"primary\">\n                    Submit\n                </Button>\n                <Button onClick={values.handleClose} color=\"primary\">\n                    Cancel\n                </Button>\n            </div>\n        </form>\n    );\n};\n\n// The type of props ActivityForm receives\ninterface ActivityFormProps {\n    activity?: Activity;\n    handleCancel(openSnack: boolean, snackType: SnackbarType, msg: string): void;\n    handleClose(): void;\n    formType: \"AddNew\" | \"Edit\";\n    activityOptions: string[];\n    userId: string;\n}\n\nconst responseMsg = {\n    addSuccess: \"Add new activity successful\",\n    addFail: \"Add activity fail!\",\n    updateSuccess: \"Update activity successful\",\n    updateFail: \"Update activity fail!\",\n};\n\nfunction isImageTypeValid(type: string): boolean {\n    const ftype = type.toLowerCase();\n    return ftype.includes(\"jpg\") || ftype.includes(\"png\") || ftype.includes(\"jpeg\");\n}\n// Wrap our form with the using withFormik HoC\nconst ActivityForm = withFormik<ActivityFormProps, ExtProps & ActivityFormValues>({\n    // Transform outer props into form values\n    mapPropsToValues: props => {\n        const activity = props.activity === undefined ? new Activity() : props.activity;\n        // This function will make sure that the system is working well for some activities that don't have the distance.\n        const getDistance = (): string => {\n            let distance = \"\";\n            if (activity.distance) {\n                distance = activity.distance.toString();\n            }\n            return distance;\n        };\n        return {\n            activityId: activity.activityId || \"0\",\n            dateTimeId: getDateInString(activity.activityDate) || \"\",\n            distanceId: getDistance(),\n            workoutTypeId: activity.workoutType || \"\",\n            durationId: getHourMin(activity.duration) || \"\",\n            locationId: activity.location || \"\",\n            handleCancel: props.handleCancel,\n            handleClose: props.handleClose,\n            formType: props.formType,\n            activityTypeId: activity.activityType || \"\",\n            activityOptions: props.activityOptions || [],\n            photoId: \"\",\n            isSnackOpen: false,\n            snackType: SnackbarType.Success,\n            snackMsg: \"\",\n            userId: props.userId,\n        };\n    },\n\n    validate: (values: ActivityFormValues) => {\n        const errors: FormikErrors<ActivityFormValues> = {};\n        // Validate activity type\n        if (!values.activityTypeId) {\n            errors.activityTypeId = activityError.activityTypeEmptyError;\n        }\n        // Validate duration\n        if (!isAPositiveNumber(values.durationId)) {\n            errors.durationId = activityError.durationEmptyError;\n        }\n        // Validate date time\n        if (!values.dateTimeId) {\n            errors.dateTimeId = activityError.dateTimeEmptyError;\n        }\n        // Validate distance if the activity is running or cycling\n        if (\n            (!values.distanceId || values.distanceId === \"0\") &&\n            values.activityTypeId &&\n            isActivityTypeHasDistance(values.activityTypeId)\n        ) {\n            errors.distanceId = activityError.distanceEmptyError;\n        } else {\n            const distance = Number(values.distanceId);\n            if (distance < 0) {\n                errors.distanceId = activityError.distanceNegativeError;\n            }\n        }\n        // Validate the image if it's not null\n        const fileList = (document.getElementById(TextFieldId.Photo) as HTMLInputElement).files;\n        if (fileList && fileList.length > 0) {\n            const file: File = fileList[0];\n            if (file.size > 5242880 /* = 5MB */) {\n                errors.photoId = activityError.imageSizeError;\n            }\n            if (!isImageTypeValid(file.type)) {\n                errors.photoId = activityError.imageFileTypeError;\n            }\n        }\n\n        return errors;\n    },\n\n    handleSubmit: (values, { setSubmitting }) => {\n        const activity = {\n            activityId: values.activityId,\n            accountId: values.userId,\n            title: values.activityTypeId + \" Activity\",\n            activityType: values.activityTypeId,\n            location: values.locationId,\n            distance: values.distanceId,\n            workoutType: values.workoutTypeId,\n            duration: \"\" + getSeconds(values.durationId),\n            activityDate: values.dateTimeId.replace(\"T\", \" \") + \":00\",\n        };\n        const data = new FormData();\n        const blobStr = new Blob([JSON.stringify(activity)], { type: \"application/json\" });\n        data.append(\"activity\", blobStr);\n        // Get the file from form\n        const fileList = (document.getElementById(TextFieldId.Photo) as HTMLInputElement).files;\n        if (fileList && fileList.length > 0) {\n            data.append(\"activityImage\", fileList[0]);\n        }\n        const method = values.formType === \"AddNew\" ? \"POST\" : \"PUT\";\n        // Send a request\n        axios({\n            method,\n            data,\n            url: \"/activities\",\n        })\n            .then(response => {\n                if (response.status === 201 || response.status === 200) {\n                    const msg =\n                        values.formType === \"AddNew\"\n                            ? responseMsg.addSuccess\n                            : responseMsg.updateSuccess;\n                    values.handleCancel(true, SnackbarType.Success, msg);\n                }\n            })\n            .catch(() => {\n                const msg =\n                    values.formType === \"AddNew\" ? responseMsg.addFail : responseMsg.updateFail;\n                values.handleCancel(true, SnackbarType.Error, msg);\n            });\n        setSubmitting(true);\n    },\n})(InnerForm);\n\nexport default ActivityForm;\n"]}]}