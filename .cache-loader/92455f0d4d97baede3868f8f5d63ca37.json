{"remainingRequest":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/components/Profile/Statistic.tsx","dependencies":[{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/components/Profile/Statistic.tsx","mtime":1543733098127},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1539584369385},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1539584369506},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport axios from \"~/common/axiosConfigure.ts\";\nimport TimeInterval from \"~/components/Profile/TimeInterval\";\nimport \"./Statistic.scss\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TooltipMaterialUI from \"@material-ui/core/Tooltip\";\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area, ComposedChart, Bar, } from \"recharts\";\nclass Statistic extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateData = (index) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const tempInterval = index;\n            const url = process.env.LOCAL_HOST_URL +\n                `/accounts/statistic/${this.props.userId}?timeinterval=${tempInterval}&timezoneoffset=${this.state.timeZoneOffset}`;\n            axios.get(url).then(response => {\n                this.setState({\n                    statistic: response.data,\n                    interval: tempInterval,\n                });\n            });\n            const urlGraphical = process.env.LOCAL_HOST_URL +\n                `/accounts/graphicalStatistic/${this.props.userId}?timeinterval=${tempInterval}&timezoneoffset=${this.state.timeZoneOffset}`;\n            axios.get(urlGraphical).then(response => {\n                this.setState({ graphicalStatistic: response.data });\n            });\n        });\n        const date = new Date();\n        this.state = {\n            statistic: null,\n            interval: \"\",\n            timeZoneOffset: date.getTimezoneOffset(),\n        };\n    }\n    componentDidMount() {\n        this.updateData(\"4\");\n    }\n    // private calculateWidth = (time: number, totalTime: number) => {\n    //     return (time * 100) / totalTime + \"%\";\n    // };\n    render() {\n        if (this.state.statistic == null || this.state.graphicalStatistic == null) {\n            return React.createElement(\"div\", null);\n        }\n        console.log(this.state.graphicalStatistic.filter(graphic => graphic.active &&\n            (graphic.activityTypeName === \"Running\" ||\n                graphic.activityTypeName === \"Cycling\" ||\n                graphic.activityTypeName === \"Climbing\")));\n        const chartKmPH = this.state.graphicalStatistic\n            .filter(graphic => graphic.active &&\n            (graphic.activityTypeName !== \"Climbing\" &&\n                graphic.activityTypeName !== \"Gym\") &&\n            graphic.activityTypeName !== \"Yoga\" &&\n            graphic.activityTypeName !== \"Meditation\")\n            .map(graphicStaistics => {\n            return (React.createElement(\"div\", { style: { textAlign: \"center\", marginBottom: \"20px\" } },\n                React.createElement(\"div\", { className: \"line-seperate-chart\" }),\n                React.createElement(TooltipMaterialUI, { title: graphicStaistics.activityTypeName },\n                    React.createElement(\"img\", { alt: \"Cannot load icon\", src: require(\"../../theme/images/\" +\n                            graphicStaistics.activityTypeName.toLowerCase() +\n                            \".png\") })),\n                React.createElement(ResponsiveContainer, { width: \"100%\", height: 320, debounce: 31 },\n                    React.createElement(ComposedChart, { width: 600, height: 400, data: graphicStaistics.activityDataDTOList },\n                        React.createElement(CartesianGrid, { vertical: true, strokeDasharray: \"3 3\" }),\n                        React.createElement(XAxis, { dataKey: \"activityDate\", label: {\n                                value: \"Date\",\n                                position: \"insideBottomRight\",\n                                offset: 0,\n                            } }),\n                        React.createElement(YAxis, { label: {\n                                value: \"Distance\",\n                                angle: -90,\n                                position: \"insideLeft\",\n                            } }),\n                        React.createElement(Tooltip, null),\n                        React.createElement(Legend, null),\n                        React.createElement(Area, { type: \"monotone\", dataKey: \"duration\", fill: \"#8884d8\", stroke: \"#8884d8\", fillOpacity: 0.7, unit: \"hrs\" }),\n                        React.createElement(Bar, { dataKey: \"distance\", barSize: 20, fill: \"#0C88C2\", unit: \"km\" }),\n                        React.createElement(Line, { type: \"monotone\", dataKey: \"velocity\", stroke: \"#ff7300\", unit: \"km/h\" })))));\n        });\n        const chartMPM = this.state.graphicalStatistic\n            .filter(graphic => graphic.active && graphic.activityTypeName === \"Climbing\")\n            .map(graphicStaistics => {\n            return (React.createElement(\"div\", { style: { textAlign: \"center\", marginBottom: \"20px\" } },\n                React.createElement(\"div\", { className: \"line-seperate-chart\" }),\n                React.createElement(TooltipMaterialUI, { title: graphicStaistics.activityTypeName },\n                    React.createElement(\"img\", { alt: \"Cannot load icon\", src: require(\"../../theme/images/\" +\n                            graphicStaistics.activityTypeName.toLowerCase() +\n                            \".png\") })),\n                React.createElement(ResponsiveContainer, { width: \"100%\", height: 320, debounce: 31 },\n                    React.createElement(ComposedChart, { width: 600, height: 400, data: graphicStaistics.activityDataDTOList },\n                        React.createElement(CartesianGrid, { vertical: true, strokeDasharray: \"3 3\" }),\n                        React.createElement(XAxis, { dataKey: \"activityDate\", label: {\n                                value: \"Date\",\n                                position: \"insideBottomRight\",\n                                offset: 0,\n                            } }),\n                        React.createElement(YAxis, { label: {\n                                value: \"Distance\",\n                                angle: -90,\n                                position: \"insideLeft\",\n                            } }),\n                        React.createElement(Tooltip, null),\n                        React.createElement(Legend, null),\n                        React.createElement(Area, { type: \"monotone\", dataKey: \"duration\", fill: \"#8884d8\", stroke: \"#8884d8\", fillOpacity: 0.7, unit: \"mins\" }),\n                        React.createElement(Bar, { dataKey: \"distance\", barSize: 20, fill: \"#0C88C2\", unit: \"m\" })))));\n        });\n        const chartDuration = this.state.graphicalStatistic\n            .filter(graphic => graphic.active &&\n            (graphic.activityTypeName === \"Yoga\" ||\n                graphic.activityTypeName === \"Gym\" ||\n                graphic.activityTypeName === \"Medidation\"))\n            .map(graphicStaistics => {\n            return (React.createElement(\"div\", { style: { textAlign: \"center\", marginBottom: \"20px\" } },\n                React.createElement(\"div\", null,\n                    React.createElement(\"div\", { className: \"line-seperate-chart\" }),\n                    React.createElement(TooltipMaterialUI, { title: graphicStaistics.activityTypeName },\n                        React.createElement(\"img\", { alt: \"Cannot load icon\", src: require(\"../../theme/images/\" +\n                                graphicStaistics.activityTypeName.toLowerCase() +\n                                \".png\") }))),\n                React.createElement(ResponsiveContainer, { width: \"100%\", height: 320 },\n                    React.createElement(LineChart, { data: graphicStaistics.activityDataDTOList, width: window.innerWidth * 0.9, height: 250, className: \"chart-line\" },\n                        React.createElement(XAxis, { dataKey: \"activityDate\" }),\n                        React.createElement(YAxis, { dataKey: \"duration\", yAxisId: \"duration\" }),\n                        React.createElement(CartesianGrid, { vertical: true, strokeDasharray: \"3 3\" }),\n                        React.createElement(Tooltip, null),\n                        React.createElement(Legend, null),\n                        React.createElement(Line, { yAxisId: \"duration\", type: \"monotone\", dataKey: \"duration\", stroke: \"#8884d8\", activeDot: { r: 8 }, unit: \"hrs\" })))));\n        });\n        // const distanceTotal =\n        //     this.state.statistic.runningDistanceTotal + this.state.statistic.cyclingDistanceTotal;\n        const timeTotal = parseFloat((this.state.statistic.activityTimeTotal / 3600).toFixed(2));\n        return (React.createElement(\"div\", null,\n            React.createElement(Paper, { style: { backgroundColor: \"#f5eeee73\", height: \"fit-content\" } },\n                React.createElement(\"div\", { style: {\n                        textAlign: \"right\",\n                        paddingTop: \"10px\",\n                        paddingRight: \"10px\",\n                        paddingBottom: \"15px\",\n                    } },\n                    React.createElement(TimeInterval, { updateData: this.updateData.bind(this) })),\n                React.createElement(\"div\", null,\n                    React.createElement(\"div\", { className: \"general\" },\n                        \"Total time: \",\n                        timeTotal,\n                        \" hour(s)\"),\n                    React.createElement(\"div\", { className: \"general\" },\n                        \"Total days: \",\n                        this.state.statistic.activeDayTotal,\n                        \" day(s)\"),\n                    this.state.statistic.runningRank !== \"-\" && (React.createElement(\"div\", { className: \"general\" },\n                        \"Running rank: \",\n                        this.state.statistic.runningRank)),\n                    React.createElement(\"div\", null,\n                        React.createElement(\"div\", { className: \"charts\" },\n                            chartKmPH,\n                            chartMPM,\n                            chartDuration))))));\n    }\n}\nexport default Statistic;\n",{"version":3,"file":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/components/Profile/Statistic.tsx","sourceRoot":"","sources":["/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/components/Profile/Statistic.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport axios from \"~/common/axiosConfigure.ts\";\nimport TimeInterval from \"~/components/Profile/TimeInterval\";\nimport \"./Statistic.scss\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TooltipMaterialUI from \"@material-ui/core/Tooltip\";\nimport {\n    ResponsiveContainer,\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    Area,\n    ComposedChart,\n    Bar,\n} from \"recharts\";\n\nexport interface StatisticType {\n    // general\n    activityTimeTotal: number;\n    activeDayTotal: number;\n    // running\n    runningDistanceTotal: number;\n    runningRank: string;\n    runningDistanceRating: number;\n    runningTimeTotal: number;\n    // cycling\n    cyclingDistanceTotal: number;\n    cyclingTimeTotal: number;\n    // gym\n    gymTimeTotal: number;\n    // meditation\n    meditationTimeTotal: number;\n    // climbing\n    climbingTimeTotal: number;\n    // skating\n    skatingTimeTotal: number;\n    // swimming\n    swimmingTimeTotal: number;\n    // yoga\n    yogaTimeTotal: number;\n    // hiking\n    hikingTimeTotal: number;\n}\nexport interface GraphicalStatisticType {\n    activityTypeName: string;\n    activityDataDTOList: [\n        { activityDate: string; distance: number; duration: number; velocity: number }\n    ];\n    active: boolean;\n}\ninterface StatisticState {\n    statistic: StatisticType | null;\n    graphicalStatistic?: [GraphicalStatisticType];\n    interval?: string;\n    timeZoneOffset?: number;\n}\n\ninterface StatisticProps {\n    userId?: string;\n}\n\nclass Statistic extends React.Component<StatisticProps, StatisticState> {\n    constructor(props: StatisticProps) {\n        super(props);\n        const date = new Date();\n        this.state = {\n            statistic: null,\n            interval: \"\",\n            timeZoneOffset: date.getTimezoneOffset(),\n        };\n    }\n\n    componentDidMount(): void {\n        this.updateData(\"4\");\n    }\n\n    private updateData = async (index: string) => {\n        const tempInterval = index;\n        const url: string =\n            process.env.LOCAL_HOST_URL +\n            `/accounts/statistic/${this.props.userId}?timeinterval=${tempInterval}&timezoneoffset=${\n                this.state.timeZoneOffset\n            }`;\n        axios.get(url).then(response => {\n            this.setState({\n                statistic: response.data,\n                interval: tempInterval,\n            });\n        });\n        const urlGraphical: string =\n            process.env.LOCAL_HOST_URL +\n            `/accounts/graphicalStatistic/${\n                this.props.userId\n            }?timeinterval=${tempInterval}&timezoneoffset=${this.state.timeZoneOffset}`;\n        axios.get(urlGraphical).then(response => {\n            this.setState({ graphicalStatistic: response.data });\n        });\n    };\n\n    // private calculateWidth = (time: number, totalTime: number) => {\n    //     return (time * 100) / totalTime + \"%\";\n    // };\n\n    render(): React.ReactNode {\n        if (this.state.statistic == null || this.state.graphicalStatistic == null) {\n            return <div />;\n        }\n        console.log(\n            this.state.graphicalStatistic.filter(\n                graphic =>\n                    graphic.active &&\n                    (graphic.activityTypeName === \"Running\" ||\n                        graphic.activityTypeName === \"Cycling\" ||\n                        graphic.activityTypeName === \"Climbing\"),\n            ),\n        );\n        const chartKmPH = this.state.graphicalStatistic\n            .filter(\n                graphic =>\n                    graphic.active &&\n                    (graphic.activityTypeName !== \"Climbing\" &&\n                        graphic.activityTypeName !== \"Gym\") &&\n                    graphic.activityTypeName !== \"Yoga\" &&\n                    graphic.activityTypeName !== \"Meditation\",\n            )\n            .map(graphicStaistics => {\n                return (\n                    <div style={{ textAlign: \"center\", marginBottom: \"20px\" }}>\n                        <div className=\"line-seperate-chart\" />\n                        <TooltipMaterialUI title={graphicStaistics.activityTypeName}>\n                            <img\n                                alt=\"Cannot load icon\"\n                                src={require(\"../../theme/images/\" +\n                                    graphicStaistics.activityTypeName.toLowerCase() +\n                                    \".png\")}\n                            />\n                        </TooltipMaterialUI>\n                        {/*<span className=\"chart-title\">{graphicStaistics.activityTypeName}</span>*/}\n                        <ResponsiveContainer width=\"100%\" height={320} debounce={31}>\n                            <ComposedChart\n                                width={600}\n                                height={400}\n                                data={graphicStaistics.activityDataDTOList}\n                            >\n                                <CartesianGrid vertical={true} strokeDasharray=\"3 3\" />\n                                <XAxis\n                                    dataKey=\"activityDate\"\n                                    label={{\n                                        value: \"Date\",\n                                        position: \"insideBottomRight\",\n                                        offset: 0,\n                                    }}\n                                />\n                                <YAxis\n                                    label={{\n                                        value: \"Distance\",\n                                        angle: -90,\n                                        position: \"insideLeft\",\n                                    }}\n                                />\n                                <Tooltip />\n                                <Legend />\n                                <Area\n                                    type=\"monotone\"\n                                    dataKey=\"duration\"\n                                    fill=\"#8884d8\"\n                                    stroke=\"#8884d8\"\n                                    fillOpacity={0.7}\n                                    unit=\"hrs\"\n                                />\n                                <Bar dataKey=\"distance\" barSize={20} fill=\"#0C88C2\" unit=\"km\" />\n                                <Line\n                                    type=\"monotone\"\n                                    dataKey=\"velocity\"\n                                    stroke=\"#ff7300\"\n                                    unit=\"km/h\"\n                                />\n                            </ComposedChart>\n                        </ResponsiveContainer>\n                    </div>\n                );\n            });\n        const chartMPM = this.state.graphicalStatistic\n            .filter(graphic => graphic.active && graphic.activityTypeName === \"Climbing\")\n            .map(graphicStaistics => {\n                return (\n                    <div style={{ textAlign: \"center\", marginBottom: \"20px\" }}>\n                        <div className=\"line-seperate-chart\" />\n                        <TooltipMaterialUI title={graphicStaistics.activityTypeName}>\n                            <img\n                                alt=\"Cannot load icon\"\n                                src={require(\"../../theme/images/\" +\n                                    graphicStaistics.activityTypeName.toLowerCase() +\n                                    \".png\")}\n                            />\n                        </TooltipMaterialUI>\n                        {/*<span className=\"chart-title\">{graphicStaistics.activityTypeName}</span>*/}\n                        <ResponsiveContainer width=\"100%\" height={320} debounce={31}>\n                            <ComposedChart\n                                width={600}\n                                height={400}\n                                data={graphicStaistics.activityDataDTOList}\n                            >\n                                <CartesianGrid vertical={true} strokeDasharray=\"3 3\" />\n                                <XAxis\n                                    dataKey=\"activityDate\"\n                                    label={{\n                                        value: \"Date\",\n                                        position: \"insideBottomRight\",\n                                        offset: 0,\n                                    }}\n                                />\n                                <YAxis\n                                    label={{\n                                        value: \"Distance\",\n                                        angle: -90,\n                                        position: \"insideLeft\",\n                                    }}\n                                />\n                                <Tooltip />\n                                <Legend />\n                                <Area\n                                    type=\"monotone\"\n                                    dataKey=\"duration\"\n                                    fill=\"#8884d8\"\n                                    stroke=\"#8884d8\"\n                                    fillOpacity={0.7}\n                                    unit=\"mins\"\n                                />\n                                <Bar dataKey=\"distance\" barSize={20} fill=\"#0C88C2\" unit=\"m\" />\n                                {/*<Line*/}\n                                {/*type=\"monotone\"*/}\n                                {/*dataKey=\"velocity\"*/}\n                                {/*stroke=\"#ff7300\"*/}\n                                {/*unit=\"m/min\"*/}\n                                {/*/>*/}\n                            </ComposedChart>\n                        </ResponsiveContainer>\n                    </div>\n                );\n            });\n        const chartDuration = this.state.graphicalStatistic\n            .filter(\n                graphic =>\n                    graphic.active &&\n                    (graphic.activityTypeName === \"Yoga\" ||\n                        graphic.activityTypeName === \"Gym\" ||\n                        graphic.activityTypeName === \"Medidation\"),\n            )\n            .map(graphicStaistics => {\n                return (\n                    <div style={{ textAlign: \"center\", marginBottom: \"20px\" }}>\n                        <div>\n                            <div className=\"line-seperate-chart\" />\n                            <TooltipMaterialUI title={graphicStaistics.activityTypeName}>\n                                <img\n                                    alt=\"Cannot load icon\"\n                                    src={require(\"../../theme/images/\" +\n                                        graphicStaistics.activityTypeName.toLowerCase() +\n                                        \".png\")}\n                                />\n                            </TooltipMaterialUI>\n                            {/*<span className=\"chart-title\">{graphicStaistics.activityTypeName}</span>*/}\n                        </div>\n                        <ResponsiveContainer width=\"100%\" height={320}>\n                            <LineChart\n                                data={graphicStaistics.activityDataDTOList}\n                                width={window.innerWidth * 0.9}\n                                height={250}\n                                className=\"chart-line\"\n                            >\n                                <XAxis dataKey=\"activityDate\" />\n                                <YAxis dataKey=\"duration\" yAxisId=\"duration\" />\n                                <CartesianGrid vertical={true} strokeDasharray=\"3 3\" />\n                                <Tooltip />\n                                <Legend />\n                                <Line\n                                    yAxisId=\"duration\"\n                                    type=\"monotone\"\n                                    dataKey=\"duration\"\n                                    stroke=\"#8884d8\"\n                                    activeDot={{ r: 8 }}\n                                    unit=\"hrs\"\n                                />\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </div>\n                );\n            });\n\n        // const distanceTotal =\n        //     this.state.statistic.runningDistanceTotal + this.state.statistic.cyclingDistanceTotal;\n        const timeTotal = parseFloat((this.state.statistic.activityTimeTotal / 3600).toFixed(2));\n        return (\n            <div>\n                <Paper style={{ backgroundColor: \"#f5eeee73\", height: \"fit-content\" }}>\n                    <div\n                        style={{\n                            textAlign: \"right\",\n                            paddingTop: \"10px\",\n                            paddingRight: \"10px\",\n                            paddingBottom: \"15px\",\n                        }}\n                    >\n                        <TimeInterval updateData={this.updateData.bind(this)} />\n                    </div>\n                    <div>\n                        <div className=\"general\">Total time: {timeTotal} hour(s)</div>\n                        <div className=\"general\">\n                            Total days: {this.state.statistic.activeDayTotal} day(s)\n                        </div>\n                        {this.state.statistic.runningRank !== \"-\" && (\n                            <div className=\"general\">\n                                Running rank: {this.state.statistic.runningRank}\n                            </div>\n                        )}\n                        <div>\n                            <div className=\"charts\">\n                                {/*Chart for distance*/}\n                                {chartKmPH}\n                                {chartMPM}\n                                {chartDuration}\n                                {/*{distanceTotal !== 0.0 && (*/}\n                                {/*<div>*/}\n                                {/*<span className=\"chart-title\">Distance</span>*/}\n                                {/*<div className=\"chart-horiz\">*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Running\"}*/}\n                                {/*stat={this.state.statistic.runningDistanceTotal}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.runningDistanceTotal,*/}\n                                {/*distanceTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Cycling\"}*/}\n                                {/*stat={this.state.statistic.cyclingDistanceTotal}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.cyclingDistanceTotal,*/}\n                                {/*distanceTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*</div>*/}\n                                {/*</div>*/}\n                                {/*)}*/}\n                                {/*/!*Chart for time*!/*/}\n                                {/*<div>*/}\n                                {/*<span className=\"chart-title\">Time</span>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Running\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(this.state.statistic.runningTimeTotal / 3600).toFixed(*/}\n                                {/*2,*/}\n                                {/*),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.runningTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Cycling\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(this.state.statistic.cyclingTimeTotal / 3600).toFixed(*/}\n                                {/*2,*/}\n                                {/*),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.cyclingTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Yoga\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(this.state.statistic.yogaTimeTotal / 3600).toFixed(2),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.yogaTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Hiking\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(this.state.statistic.hikingTimeTotal / 3600).toFixed(*/}\n                                {/*2,*/}\n                                {/*),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.hikingTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Skating\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(this.state.statistic.skatingTimeTotal / 3600).toFixed(*/}\n                                {/*2,*/}\n                                {/*),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.skatingTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Swimming\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(this.state.statistic.swimmingTimeTotal / 3600).toFixed(*/}\n                                {/*2,*/}\n                                {/*),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.swimmingTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Gym\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(this.state.statistic.gymTimeTotal / 3600).toFixed(2),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.gymTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Meditation\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(*/}\n                                {/*this.state.statistic.meditationTimeTotal / 3600*/}\n                                {/*).toFixed(2),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.meditationTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Climbing\"}*/}\n                                {/*stat={parseFloat(*/}\n                                {/*(this.state.statistic.climbingTimeTotal / 3600).toFixed(*/}\n                                {/*2,*/}\n                                {/*),*/}\n                                {/*)}*/}\n                                {/*percent={this.calculateWidth(*/}\n                                {/*this.state.statistic.climbingTimeTotal,*/}\n                                {/*this.state.statistic.activityTimeTotal,*/}\n                                {/*)}*/}\n                                {/*/>*/}\n                                {/*</div>*/}\n                                {/*Chart for rating*/}\n                                {/*{this.state.statistic.runningDistanceRating !== 0.0 && (*/}\n                                {/*<div>*/}\n                                {/*<span className=\"chart-title\">Rating</span>*/}\n                                {/*<BarChart*/}\n                                {/*name={\"Running\"}*/}\n                                {/*stat={this.state.statistic.runningDistanceRating}*/}\n                                {/*percent={`${*/}\n                                {/*this.state.statistic.runningDistanceRating*/}\n                                {/*}%`}*/}\n                                {/*/>*/}\n                                {/*</div>*/}\n                                {/*)}*/}\n                            </div>\n                        </div>\n                    </div>\n                </Paper>\n            </div>\n        );\n    }\n}\nexport default Statistic;\n"]}]}