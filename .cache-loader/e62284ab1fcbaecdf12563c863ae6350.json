{"remainingRequest":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/activity/ActivityModal.tsx","dependencies":[{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/activity/ActivityModal.tsx","mtime":1532010673932},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport { Grid, Icon } from \"@material-ui/core\";\nimport Activity from \"~/containers/activity/Activity\";\nimport ActivityForm from \"~/containers/activity/ActivityForm\";\nimport axios from \"~/common/axiosConfigure\";\nimport \"./modalStyle.css\";\nimport { SnackbarType } from \"~/containers/snackbar/SnackbarType\";\nimport SportSnackbar from \"~/containers/snackbar/SportSnackbar\";\nclass ActivityModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClickOpen = () => {\n            this.setState({ isOpen: true });\n        };\n        /**\n         * After adding or updating request to server success, the modal will close and update the card list\n         * @param openSnack - the status of the snack. Open or not\n         * @param snackType - snack type (Error or success)\n         * @param msg - the message of the snack\n         */\n        this.handleCancel = (openSnack, snackType, msg) => {\n            this.setState({\n                isSnackbarOpen: openSnack,\n                snackbarType: snackType,\n                snackbarMsg: msg,\n            });\n            this.handleClose();\n            this.props.updateTableData();\n        };\n        /**\n         * This funtion use for closing the modal when a user clicks the cancle button\n         */\n        this.handleClose = () => {\n            this.setState({ isOpen: false });\n        };\n        this.renderFormContent = () => {\n            if (this.props.icon === \"AddIcon\") {\n                return (React.createElement(ActivityForm, { handleCancel: this.handleCancel, handleClose: this.handleClose, formType: \"AddNew\", activity: new Activity(), activityOptions: this.state.activityTypes, userId: this.props.userId }));\n            }\n            const activity = !this.props.activity ? new Activity() : this.props.activity;\n            return (React.createElement(ActivityForm, { handleCancel: this.handleCancel, handleClose: this.handleClose, formType: \"Edit\", activity: activity, activityOptions: this.state.activityTypes, userId: this.props.userId }));\n        };\n        this.state = {\n            isOpen: false,\n            activityTypes: [],\n            isSnackbarOpen: false,\n            snackbarType: SnackbarType.Success,\n            snackbarMsg: \"\",\n        };\n    }\n    componentDidMount() {\n        const url = \"/activities/activitytypes\";\n        axios.get(url).then(response => {\n            this.setState({ activityTypes: response.data });\n        });\n    }\n    render() {\n        const { isSnackbarOpen, snackbarType, snackbarMsg, isOpen } = this.state;\n        return (React.createElement(\"div\", null,\n            this.props.icon === \"AddIcon\" && (React.createElement(Grid, null,\n                React.createElement(Button, { variant: \"fab\", onClick: this.handleClickOpen },\n                    React.createElement(Icon, { style: { color: \"#4267b2\", fontSize: 70, margin: -6 } }, \"add_circle\")))),\n            React.createElement(Dialog, { open: isOpen, disableEscapeKeyDown: true },\n                React.createElement(DialogTitle, { className: \"bottom-line text-center\" }, this.props.label),\n                React.createElement(DialogContent, null, this.renderFormContent())),\n            isSnackbarOpen ? (React.createElement(SportSnackbar, { type: snackbarType, message: snackbarMsg })) : null));\n    }\n}\nexport default ActivityModal;\n",{"version":3,"file":"/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/activity/ActivityModal.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/Aptech-softech/sportstracker-fe/src/containers/activity/ActivityModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport { Grid, Icon } from \"@material-ui/core\";\nimport Activity from \"~/containers/activity/Activity\";\nimport ActivityForm from \"~/containers/activity/ActivityForm\";\nimport axios from \"~/common/axiosConfigure\";\nimport \"./modalStyle.css\";\nimport { SnackbarType } from \"~/containers/snackbar/SnackbarType\";\nimport SportSnackbar from \"~/containers/snackbar/SportSnackbar\";\n\ninterface ActivityModalProps {\n    label: string;\n    icon: \"AddIcon\" | \"EditIcon\";\n    activity?: Activity;\n    updateTableData: () => void;\n    userId: string;\n}\n\ninterface ActivityModalState {\n    isOpen: boolean;\n    activityTypes: string[];\n    isSnackbarOpen: boolean;\n    snackbarType: SnackbarType;\n    snackbarMsg: string;\n}\n\nclass ActivityModal extends React.Component<ActivityModalProps, ActivityModalState> {\n    constructor(props: ActivityModalProps) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            activityTypes: [],\n            isSnackbarOpen: false,\n            snackbarType: SnackbarType.Success,\n            snackbarMsg: \"\",\n        };\n    }\n    componentDidMount(): void {\n        const url = \"/activities/activitytypes\";\n        axios.get(url).then(response => {\n            this.setState({ activityTypes: response.data });\n        });\n    }\n    render(): React.ReactNode {\n        const { isSnackbarOpen, snackbarType, snackbarMsg, isOpen } = this.state;\n        return (\n            <div>\n                {this.props.icon === \"AddIcon\" && (\n                    <Grid>\n                        <Button variant=\"fab\" onClick={this.handleClickOpen}>\n                            <Icon style={{ color: \"#4267b2\", fontSize: 70, margin: -6 }}>\n                                add_circle\n                            </Icon>\n                        </Button>\n                    </Grid>\n                )}\n                <Dialog open={isOpen} disableEscapeKeyDown>\n                    <DialogTitle className={\"bottom-line text-center\"}>\n                        {this.props.label}\n                    </DialogTitle>\n                    <DialogContent>{this.renderFormContent()}</DialogContent>\n                </Dialog>\n                {isSnackbarOpen ? (\n                    <SportSnackbar type={snackbarType} message={snackbarMsg} />\n                ) : null}\n            </div>\n        );\n    }\n\n    public handleClickOpen = (): void => {\n        this.setState({ isOpen: true });\n    };\n\n    /**\n     * After adding or updating request to server success, the modal will close and update the card list\n     * @param openSnack - the status of the snack. Open or not\n     * @param snackType - snack type (Error or success)\n     * @param msg - the message of the snack\n     */\n    public handleCancel = (openSnack: boolean, snackType: SnackbarType, msg: string): void => {\n        this.setState({\n            isSnackbarOpen: openSnack,\n            snackbarType: snackType,\n            snackbarMsg: msg,\n        });\n        this.handleClose();\n        this.props.updateTableData();\n    };\n\n    /**\n     * This funtion use for closing the modal when a user clicks the cancle button\n     */\n    public handleClose = (): void => {\n        this.setState({ isOpen: false });\n    };\n\n    private renderFormContent = (): React.ReactNode => {\n        if (this.props.icon === \"AddIcon\") {\n            return (\n                <ActivityForm\n                    handleCancel={this.handleCancel}\n                    handleClose={this.handleClose}\n                    formType={\"AddNew\"}\n                    activity={new Activity()}\n                    activityOptions={this.state.activityTypes}\n                    userId={this.props.userId}\n                />\n            );\n        }\n\n        const activity = !this.props.activity ? new Activity() : this.props.activity;\n        return (\n            <ActivityForm\n                handleCancel={this.handleCancel}\n                handleClose={this.handleClose}\n                formType={\"Edit\"}\n                activity={activity}\n                activityOptions={this.state.activityTypes}\n                userId={this.props.userId}\n            />\n        );\n    };\n}\n\nexport default ActivityModal;\n"]}]}