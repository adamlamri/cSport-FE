{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/competition/SearchUserInTeam.tsx","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/competition/SearchUserInTeam.tsx","mtime":1532407832745},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport MemberShortInfo from \"./MemberShortInfo\";\nimport { searchUserActions } from \"~/data/searchUser/index\";\nimport { TextField } from \"@material-ui/core\";\nimport Search from \"@material-ui/icons/Search\";\nimport { connect } from \"react-redux\";\nimport \"./SearchUserInTeam.scss\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport green from \"@material-ui/core/colors/green\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { competitionActions } from \"~/data/competition\";\nconst theme = createMuiTheme({\n    overrides: {\n        MuiSnackbarContent: {\n            root: {\n                backgroundColor: green[600],\n            },\n        },\n    },\n});\nclass SearchUserInTeam extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            fullName: \"\",\n            isEmpty: true,\n            notificationOpen: false,\n        };\n        this.notificationOpen = () => {\n            this.setState({ notificationOpen: true });\n        };\n        this.notificationClose = () => {\n            this.setState({ notificationOpen: false });\n        };\n        this.renderNotification = () => {\n            this.notificationOpen();\n        };\n        this.handleChange = (event) => {\n            this.setState({\n                fullName: event.target.value,\n            });\n        };\n        this.handleClick = () => {\n            if (this.state.fullName) {\n                const userId = this.props.currentUser ? this.props.currentUser.accountId : \"1\";\n                this.props.fetchUserList(this.state.fullName, userId);\n                this.props.fetchCompetitions(userId);\n            }\n            this.setState({ isEmpty: false });\n        };\n        this.handleEnter = (event) => {\n            if (event.key === \"Enter\") {\n                this.handleClick();\n            }\n        };\n    }\n    render() {\n        let list = null;\n        const userId = this.props.currentUser ? this.props.currentUser.accountId : \"1\";\n        if (this.state.isEmpty) {\n            list = React.createElement(\"div\", null);\n        }\n        else {\n            if (this.props.userList === undefined || this.props.userList.length === 0) {\n                list = React.createElement(\"div\", { className: \"au-list-member\" }, \"No result\");\n            }\n            else {\n                list = (React.createElement(\"div\", { className: \"au-list-member\" }, this.props.userList.map((user) => {\n                    return (React.createElement(\"div\", { className: \"au-list-member-component\", key: user.accountId },\n                        React.createElement(MemberShortInfo, { accountId: user.accountId, fullName: user.fullName, email: user.email, imageLink: user.imageLink, refreshUsersList: this.handleClick, turnOn: this.renderNotification, userId: userId })));\n                })));\n            }\n        }\n        return (React.createElement(\"div\", { className: \"au-container\" },\n            React.createElement(\"div\", { className: \"au-search-box\" },\n                React.createElement(TextField, { id: \"input-with-icon-grid\", label: \"Find people\", className: \"search-box\", onChange: this.handleChange, onKeyPress: this.handleEnter, InputProps: {\n                        endAdornment: (React.createElement(InputAdornment, { position: \"end\" },\n                            React.createElement(Search, { onClick: this.handleClick }))),\n                    } })),\n            list,\n            React.createElement(MuiThemeProvider, { theme: theme },\n                React.createElement(Snackbar, { className: \"nofi\", anchorOrigin: {\n                        vertical: \"bottom\",\n                        horizontal: \"left\",\n                    }, open: this.state.notificationOpen, autoHideDuration: 2000, onClose: this.notificationClose, message: React.createElement(\"span\", { id: \"message-id\" },\n                        React.createElement(CheckCircleIcon, { id: \"checked-icon\" }),\n                        \"Invite successfully!!\") }))));\n    }\n}\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state) => {\n    return {\n        userList: state.searchUser.list.data,\n        currentUser: state.currentUser.currentUser,\n    };\n};\n// map the action of redux to component prop\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchUserList: (fullName, accountId) => {\n            dispatch(searchUserActions.fetchUserListNotInCompetition(fullName, accountId));\n        },\n        fetchCompetitions: (userId) => {\n            dispatch(competitionActions.fetchCompetitions(userId));\n        },\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchUserInTeam);\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/competition/SearchUserInTeam.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/competition/SearchUserInTeam.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as Redux from \"redux\";\nimport MemberShortInfo from \"./MemberShortInfo\";\nimport { searchUserActions } from \"~/data/searchUser/index\";\nimport { UserType } from \"~/data/searchUser/actionCreators\";\nimport { TextField } from \"@material-ui/core\";\nimport Search from \"@material-ui/icons/Search\";\nimport { connect } from \"react-redux\";\nimport \"./SearchUserInTeam.scss\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport green from \"@material-ui/core/colors/green\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { competitionActions } from \"~/data/competition\";\n\ninterface UserListProps {\n    userList: UserType[];\n    fetchUserList: Redux.ActionCreator<{}>;\n    currentUser: {\n        accountId: string;\n    };\n    fetchCompetitions: Redux.ActionCreator<{}>;\n}\n\ninterface SearchBoxState {\n    fullName: string;\n    isEmpty: boolean;\n    notificationOpen: boolean;\n}\n\nconst theme = createMuiTheme({\n    overrides: {\n        MuiSnackbarContent: {\n            root: {\n                backgroundColor: green[600],\n            },\n        },\n    },\n});\n\nclass SearchUserInTeam extends React.Component<UserListProps, {}> {\n    state: SearchBoxState = {\n        fullName: \"\",\n        isEmpty: true,\n        notificationOpen: false,\n    };\n\n    private notificationOpen = (): void => {\n        this.setState({ notificationOpen: true });\n    };\n\n    private notificationClose = (): void => {\n        this.setState({ notificationOpen: false });\n    };\n\n    private renderNotification = (): void => {\n        this.notificationOpen();\n    };\n\n    private handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            fullName: event.target.value,\n        });\n    };\n    private handleClick = (): void => {\n        if (this.state.fullName) {\n            const userId = this.props.currentUser ? this.props.currentUser.accountId : \"1\";\n            this.props.fetchUserList(this.state.fullName, userId);\n            this.props.fetchCompetitions(userId);\n        }\n        this.setState({ isEmpty: false });\n    };\n    private handleEnter = (event: React.KeyboardEvent): void => {\n        if (event.key === \"Enter\") {\n            this.handleClick();\n        }\n    };\n    render(): React.ReactNode {\n        let list = null;\n        const userId = this.props.currentUser ? this.props.currentUser.accountId : \"1\";\n        if (this.state.isEmpty) {\n            list = <div />;\n        } else {\n            if (this.props.userList === undefined || this.props.userList.length === 0) {\n                list = <div className=\"au-list-member\">No result</div>;\n            } else {\n                list = (\n                    <div className=\"au-list-member\">\n                        {this.props.userList.map((user: UserType) => {\n                            return (\n                                <div className=\"au-list-member-component\" key={user.accountId}>\n                                    <MemberShortInfo\n                                        accountId={user.accountId}\n                                        fullName={user.fullName}\n                                        email={user.email}\n                                        imageLink={user.imageLink}\n                                        refreshUsersList={this.handleClick}\n                                        turnOn={this.renderNotification}\n                                        userId={userId}\n                                    />\n                                </div>\n                            );\n                        })}\n                    </div>\n                );\n            }\n        }\n        return (\n            <div className=\"au-container\">\n                <div className=\"au-search-box\">\n                    <TextField\n                        id=\"input-with-icon-grid\"\n                        label=\"Find people\"\n                        className=\"search-box\"\n                        onChange={this.handleChange}\n                        onKeyPress={this.handleEnter}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Search onClick={this.handleClick} />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </div>\n                {list}\n                <MuiThemeProvider theme={theme}>\n                    <Snackbar\n                        className=\"nofi\"\n                        anchorOrigin={{\n                            vertical: \"bottom\",\n                            horizontal: \"left\",\n                        }}\n                        open={this.state.notificationOpen}\n                        autoHideDuration={2000}\n                        onClose={this.notificationClose}\n                        message={\n                            <span id=\"message-id\">\n                                <CheckCircleIcon id=\"checked-icon\" />\n                                Invite successfully!!\n                            </span>\n                        }\n                    />\n                </MuiThemeProvider>\n            </div>\n        );\n    }\n}\n\n// specify exactly which slice of the state we want to provide to our component\nconst mapStateToProps = (state: any) => {\n    return {\n        userList: state.searchUser.list.data,\n        currentUser: state.currentUser.currentUser,\n    };\n};\n\n// map the action of redux to component prop\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        fetchUserList: (fullName: string, accountId: string) => {\n            dispatch(searchUserActions.fetchUserListNotInCompetition(fullName, accountId));\n        },\n        fetchCompetitions: (userId: string) => {\n            dispatch(competitionActions.fetchCompetitions(userId));\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(SearchUserInTeam);\n"]}]}