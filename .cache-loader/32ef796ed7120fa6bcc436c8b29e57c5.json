{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/components/tracker/DistanceTimeTracker.tsx","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/components/tracker/DistanceTimeTracker.tsx","mtime":1532684874209},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport \"./TrackerStyle.scss\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { Button, Fade, Snackbar } from \"../../../node_modules/@material-ui/core\";\nimport Icon from \"@material-ui/core/Icon\";\nimport axios from \"~/common/axiosConfigure\";\nimport { today } from \"~/common/util\";\nimport { ConfirmDialog } from \"~/pages/competition/ConfirmDialog\";\nconst KalmanFilter = require(\"kalmanjs\").default;\nclass DistanceTimeTracker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.kalmanLongitudeFilter = new KalmanFilter({ R: 0.01, Q: 3 });\n        this.kalmanLatitudeFilter = new KalmanFilter({ R: 0.01, Q: 3 });\n        // avoid bug when use them as callback\n        this.startRunning = this.startRunning.bind(this);\n        this.stopRunning = this.stopRunning.bind(this);\n        this.handleCloseDialog = this.handleCloseDialog.bind(this);\n        this.handleOpenDialog = this.handleOpenDialog.bind(this);\n        this.handleSnackClose = this.handleSnackClose.bind(this);\n        this.handleSnackOpen = this.handleSnackOpen.bind(this);\n        this.handleOpenConfirm = this.handleOpenConfirm.bind(this);\n        this.handleRejectRunResult = this.handleRejectRunResult.bind(this);\n        this.handleAcceptRunResult = this.handleAcceptRunResult.bind(this);\n        this.handleIgnoreConfirm = this.handleIgnoreConfirm.bind(this);\n        // set inital state\n        this.state = {\n            isRunning: false,\n            time: 0,\n            distance: 0,\n            currentLocation: {\n                latitude: 0,\n                longitude: 0,\n            },\n            snackMessage: \"\",\n            isSnackbarOpen: false,\n            handleClick: this.startRunning,\n            isDialogOpen: false,\n            isConfirmOpen: false,\n        };\n    }\n    componentWillUnmount() {\n        this.stopRunning();\n    }\n    handleCloseDialog() {\n        this.stopRunning();\n        // prepare data to update activity\n        const data = this.props.activity;\n        data.duration = this.state.time;\n        data.activityDate = today().replace(\"T\", \" \") + \":00\";\n        data.distance = parseFloat(this.state.distance.toFixed(2));\n        delete data.imageLink;\n        const formData = new FormData();\n        const blobStr = new Blob([JSON.stringify(data)], { type: \"application/json\" });\n        formData.append(\"activity\", blobStr);\n        // send data\n        axios.put(\"/activities\", formData).then(() => {\n            this.handleSnackOpen(\"Update activity successfully!\");\n            window.location = window.location;\n        });\n        this.setState({\n            isDialogOpen: false,\n            isConfirmOpen: false,\n            distance: 0,\n            time: 0,\n        });\n        window.location = window.location;\n    }\n    handleOpenDialog() {\n        this.setState({\n            isDialogOpen: true,\n        });\n    }\n    updateDistance(newLocation) {\n        const { currentLocation, distance } = this.state;\n        const newCorrectRate = Math.max(0, (newLocation.coords.accuracy - 20) / newLocation.coords.accuracy);\n        this.kalmanLatitudeFilter.Q = newCorrectRate;\n        this.kalmanLongitudeFilter.Q = newCorrectRate;\n        const newFilteredLocation = {\n            latitude: this.kalmanLatitudeFilter.filter(newLocation.coords.latitude),\n            longitude: this.kalmanLongitudeFilter.filter(newLocation.coords.longitude),\n        };\n        this.setState({\n            distance: currentLocation.latitude\n                ? distance +\n                    this.calculateLocation(currentLocation.latitude, currentLocation.longitude, newFilteredLocation.latitude, newFilteredLocation.longitude)\n                : 0,\n            currentLocation: newFilteredLocation,\n        });\n    }\n    handleSnackClose() {\n        this.setState({\n            isSnackbarOpen: false,\n        });\n    }\n    handleSnackOpen(message) {\n        this.setState({\n            isSnackbarOpen: true,\n            snackMessage: message,\n        });\n        setTimeout(this.handleSnackClose, 2000);\n    }\n    handleAcceptRunResult() {\n        this.handleCloseDialog();\n    }\n    handleRejectRunResult() {\n        this.stopRunning();\n        this.setState({\n            time: 0,\n            distance: 0,\n            isDialogOpen: false,\n            isConfirmOpen: false,\n        });\n    }\n    handleIgnoreConfirm() {\n        this.setState({\n            isConfirmOpen: false,\n        });\n    }\n    handleOpenConfirm() {\n        this.setState({\n            isConfirmOpen: true,\n        });\n    }\n    // function calculate the distance from latitude and longitude\n    calculateLocation(lat1, lon1, lat2, lon2) {\n        const radlat1 = (Math.PI * lat1) / 180;\n        const radlat2 = (Math.PI * lat2) / 180;\n        const theta = lon1 - lon2;\n        const radtheta = (Math.PI * theta) / 180;\n        let dist = Math.sin(radlat1) * Math.sin(radlat2) +\n            Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = (dist * 180) / Math.PI;\n        dist = dist * 60 * 1.853159616;\n        return dist;\n    }\n    // function add 1 second to the time\n    count() {\n        const { time } = this.state;\n        this.setState({\n            time: time + 1,\n        });\n    }\n    // function for start running\n    startRunning() {\n        this.setState({\n            isRunning: true,\n            handleClick: this.stopRunning,\n        });\n        if (navigator.geolocation) {\n            this.locator = navigator.geolocation.watchPosition((location) => this.updateDistance(location), () => {\n                console.log(\"error in getting location\");\n            }, {\n                enableHighAccuracy: false,\n                maximumAge: 0,\n            });\n            this.timer = window.setInterval(() => {\n                this.count();\n            }, 1000);\n        }\n        else {\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n    }\n    // function for stop running\n    stopRunning() {\n        // you have to be running before stop running\n        if (!this.state.isRunning)\n            return;\n        // show notification that the run is being paused\n        this.handleSnackOpen(`You are taking a rest. Tap \"Run\" to continue, tap close Dialog to save your run`);\n        // stop running\n        this.setState({\n            isRunning: false,\n            handleClick: this.startRunning,\n        });\n        // clear asynchronous task\n        window.clearInterval(this.timer);\n        navigator.geolocation.clearWatch(this.locator);\n    }\n    // function to add leading number 0 to number\n    format(number) {\n        return number < 10 ? \"0\" + number.toString() : number.toString();\n    }\n    render() {\n        const { distance, time } = this.state;\n        const second = time % 60;\n        const minute = (time - second) / 60;\n        const hour = Math.floor(time / 3600);\n        return (React.createElement(\"div\", null,\n            React.createElement(Snackbar, { open: this.state.isSnackbarOpen, onClose: this.handleSnackClose, TransitionComponent: Fade, ContentProps: {\n                    \"aria-describedby\": \"message-id\",\n                }, message: React.createElement(\"span\", { id: \"message-id\" }, this.state.snackMessage) }),\n            React.createElement(Dialog, { fullScreen: true, open: this.state.isDialogOpen, onClose: this.stopRunning, \"aria-labelledby\": \"responsive-dialog-title\" },\n                React.createElement(DialogContent, { className: \"dialog\" },\n                    React.createElement(ConfirmDialog, { open: this.state.isConfirmOpen, close: this.handleRejectRunResult, imgLink: require(\"../../theme/images/save-run.png\"), title: \"You decided to finish run!\", content: \"Do you want to save the result?\\nTap outside to continue.\", confirm: this.handleAcceptRunResult, ignore: this.handleIgnoreConfirm }),\n                    React.createElement(Snackbar, { open: this.state.isSnackbarOpen, onClose: this.handleSnackClose, TransitionComponent: Fade, ContentProps: {\n                            \"aria-describedby\": \"message-id\",\n                        }, message: React.createElement(\"span\", { id: \"message-id\" }, this.state.snackMessage) }),\n                    React.createElement(\"div\", null,\n                        React.createElement(Button, { onClick: this.handleOpenConfirm, className: \"buttonClose\" },\n                            React.createElement(Icon, null, \"clear\")),\n                        React.createElement(\"main\", { className: `tracker-container ${this.state.isRunning &&\n                                \"tracker-container-running\"}` },\n                            React.createElement(\"div\", { className: \"distance counter\" },\n                                React.createElement(\"div\", { className: \"loading-container\" },\n                                    React.createElement(\"div\", { className: \"loading\" }),\n                                    React.createElement(\"div\", { id: \"loading-text\" },\n                                        distance.toFixed(2),\n                                        \" KM\"))),\n                            React.createElement(\"div\", { className: \"progress\" }),\n                            React.createElement(\"div\", { className: \"counter\" }, this.format(hour)),\n                            React.createElement(\"div\", { className: \"counter\" }, \":\"),\n                            React.createElement(\"div\", { className: \"counter\" }, this.format(minute)),\n                            React.createElement(\"div\", { className: \"counter\" }, \":\"),\n                            React.createElement(\"div\", { className: \"counter\" }, this.format(second)),\n                            React.createElement(\"button\", { className: \"button\", onClick: this.state.handleClick }, \"Toggle\")))))));\n    }\n}\nexport default DistanceTimeTracker;\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/components/tracker/DistanceTimeTracker.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/components/tracker/DistanceTimeTracker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport ActivityInterface from \"~/containers/activity/ActivityInterface\";\nimport \"./TrackerStyle.scss\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { Button, Fade, Snackbar } from \"../../../node_modules/@material-ui/core\";\nimport Icon from \"@material-ui/core/Icon\";\nimport axios from \"~/common/axiosConfigure\";\nimport { today } from \"~/common/util\";\nimport { ConfirmDialog } from \"~/pages/competition/ConfirmDialog\";\nconst KalmanFilter = require(\"kalmanjs\").default;\n\ninterface IDistanceTimeTrackerProps {\n    activity: ActivityInterface;\n}\n\ninterface IDistanceTimeTrackerState {\n    isRunning: boolean;\n    time: number;\n    distance: number;\n    currentLocation: {\n        latitude: number;\n        longitude: number;\n    };\n    handleClick: () => void;\n    isDialogOpen: boolean;\n    isSnackbarOpen: boolean;\n    snackMessage: string;\n    isConfirmOpen: boolean;\n}\n\nclass DistanceTimeTracker extends React.Component<\n    IDistanceTimeTrackerProps,\n    IDistanceTimeTrackerState\n> {\n    private timer: number;\n    private locator: number;\n    private kalmanLongitudeFilter = new KalmanFilter({ R: 0.01, Q: 3 });\n    private kalmanLatitudeFilter = new KalmanFilter({ R: 0.01, Q: 3 });\n    constructor(props: IDistanceTimeTrackerProps) {\n        super(props);\n        // avoid bug when use them as callback\n        this.startRunning = this.startRunning.bind(this);\n        this.stopRunning = this.stopRunning.bind(this);\n        this.handleCloseDialog = this.handleCloseDialog.bind(this);\n        this.handleOpenDialog = this.handleOpenDialog.bind(this);\n        this.handleSnackClose = this.handleSnackClose.bind(this);\n        this.handleSnackOpen = this.handleSnackOpen.bind(this);\n        this.handleOpenConfirm = this.handleOpenConfirm.bind(this);\n        this.handleRejectRunResult = this.handleRejectRunResult.bind(this);\n        this.handleAcceptRunResult = this.handleAcceptRunResult.bind(this);\n        this.handleIgnoreConfirm = this.handleIgnoreConfirm.bind(this);\n\n        // set inital state\n        this.state = {\n            isRunning: false,\n            time: 0,\n            distance: 0,\n            currentLocation: {\n                latitude: 0,\n                longitude: 0,\n            },\n            snackMessage: \"\",\n            isSnackbarOpen: false,\n            handleClick: this.startRunning,\n            isDialogOpen: false,\n            isConfirmOpen: false,\n        };\n    }\n\n    componentWillUnmount() {\n        this.stopRunning();\n    }\n\n    private handleCloseDialog(): void {\n        this.stopRunning();\n\n        // prepare data to update activity\n        const data = this.props.activity;\n        data.duration = this.state.time;\n        data.activityDate = today().replace(\"T\", \" \") + \":00\";\n        data.distance = parseFloat(this.state.distance.toFixed(2));\n        delete data.imageLink;\n        const formData = new FormData();\n        const blobStr = new Blob([JSON.stringify(data)], { type: \"application/json\" });\n        formData.append(\"activity\", blobStr);\n        // send data\n        axios.put(\"/activities\", formData).then(() => {\n            this.handleSnackOpen(\"Update activity successfully!\");\n            window.location = window.location;\n        });\n\n        this.setState({\n            isDialogOpen: false,\n            isConfirmOpen: false,\n            distance: 0,\n            time: 0,\n        });\n        window.location = window.location;\n    }\n\n    public handleOpenDialog(): void {\n        this.setState({\n            isDialogOpen: true,\n        });\n    }\n    private updateDistance(newLocation: Position): void {\n        const { currentLocation, distance } = this.state;\n        const newCorrectRate = Math.max(\n            0,\n            (newLocation.coords.accuracy - 20) / newLocation.coords.accuracy,\n        );\n        this.kalmanLatitudeFilter.Q = newCorrectRate;\n        this.kalmanLongitudeFilter.Q = newCorrectRate;\n        const newFilteredLocation = {\n            latitude: this.kalmanLatitudeFilter.filter(newLocation.coords.latitude),\n            longitude: this.kalmanLongitudeFilter.filter(newLocation.coords.longitude),\n        };\n        this.setState({\n            distance: currentLocation.latitude\n                ? distance +\n                  this.calculateLocation(\n                      currentLocation.latitude,\n                      currentLocation.longitude,\n                      newFilteredLocation.latitude,\n                      newFilteredLocation.longitude,\n                  )\n                : 0,\n            currentLocation: newFilteredLocation,\n        });\n    }\n\n    private handleSnackClose(): void {\n        this.setState({\n            isSnackbarOpen: false,\n        });\n    }\n\n    private handleSnackOpen(message: string): void {\n        this.setState({\n            isSnackbarOpen: true,\n            snackMessage: message,\n        });\n        setTimeout(this.handleSnackClose, 2000);\n    }\n\n    private handleAcceptRunResult() {\n        this.handleCloseDialog();\n    }\n\n    private handleRejectRunResult() {\n        this.stopRunning();\n        this.setState({\n            time: 0,\n            distance: 0,\n            isDialogOpen: false,\n            isConfirmOpen: false,\n        });\n    }\n\n    private handleIgnoreConfirm() {\n        this.setState({\n            isConfirmOpen: false,\n        });\n    }\n\n    private handleOpenConfirm() {\n        this.setState({\n            isConfirmOpen: true,\n        });\n    }\n\n    // function calculate the distance from latitude and longitude\n    private calculateLocation(lat1: number, lon1: number, lat2: number, lon2: number): number {\n        const radlat1 = (Math.PI * lat1) / 180;\n        const radlat2 = (Math.PI * lat2) / 180;\n        const theta = lon1 - lon2;\n        const radtheta = (Math.PI * theta) / 180;\n        let dist =\n            Math.sin(radlat1) * Math.sin(radlat2) +\n            Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = (dist * 180) / Math.PI;\n        dist = dist * 60 * 1.853159616;\n        return dist;\n    }\n\n    // function add 1 second to the time\n    private count() {\n        const { time } = this.state;\n        this.setState({\n            time: time + 1,\n        });\n    }\n\n    // function for start running\n    private startRunning(): void {\n        this.setState({\n            isRunning: true,\n            handleClick: this.stopRunning,\n        });\n        if (navigator.geolocation) {\n            this.locator = navigator.geolocation.watchPosition(\n                (location: Position) => this.updateDistance(location),\n                () => {\n                    console.log(\"error in getting location\");\n                },\n                {\n                    enableHighAccuracy: false,\n                    maximumAge: 0,\n                },\n            );\n            this.timer = window.setInterval(() => {\n                this.count();\n            }, 1000);\n        } else {\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n    }\n\n    // function for stop running\n    private stopRunning(): void {\n        // you have to be running before stop running\n        if (!this.state.isRunning) return;\n\n        // show notification that the run is being paused\n        this.handleSnackOpen(\n            `You are taking a rest. Tap \"Run\" to continue, tap close Dialog to save your run`,\n        );\n\n        // stop running\n        this.setState({\n            isRunning: false,\n            handleClick: this.startRunning,\n        });\n\n        // clear asynchronous task\n        window.clearInterval(this.timer);\n        navigator.geolocation.clearWatch(this.locator);\n    }\n\n    // function to add leading number 0 to number\n    private format(number: number): string {\n        return number < 10 ? \"0\" + number.toString() : number.toString();\n    }\n\n    public render(): React.ReactNode {\n        const { distance, time } = this.state;\n        const second = time % 60;\n        const minute = (time - second) / 60;\n        const hour = Math.floor(time / 3600);\n        return (\n            <div>\n                <Snackbar\n                    open={this.state.isSnackbarOpen}\n                    onClose={this.handleSnackClose}\n                    TransitionComponent={Fade}\n                    ContentProps={{\n                        \"aria-describedby\": \"message-id\",\n                    }}\n                    message={<span id=\"message-id\">{this.state.snackMessage}</span>}\n                />\n                <Dialog\n                    fullScreen={true}\n                    open={this.state.isDialogOpen}\n                    onClose={this.stopRunning}\n                    aria-labelledby=\"responsive-dialog-title\"\n                >\n                    <DialogContent className=\"dialog\">\n                        <ConfirmDialog\n                            open={this.state.isConfirmOpen}\n                            close={this.handleRejectRunResult}\n                            imgLink={require(\"../../theme/images/save-run.png\")}\n                            title={\"You decided to finish run!\"}\n                            content={\"Do you want to save the result?\\nTap outside to continue.\"}\n                            confirm={this.handleAcceptRunResult}\n                            ignore={this.handleIgnoreConfirm}\n                        />\n                        <Snackbar\n                            open={this.state.isSnackbarOpen}\n                            onClose={this.handleSnackClose}\n                            TransitionComponent={Fade}\n                            ContentProps={{\n                                \"aria-describedby\": \"message-id\",\n                            }}\n                            message={<span id=\"message-id\">{this.state.snackMessage}</span>}\n                        />\n                        <div>\n                            <Button onClick={this.handleOpenConfirm} className=\"buttonClose\">\n                                <Icon>clear</Icon>\n                            </Button>\n                            <main\n                                className={`tracker-container ${this.state.isRunning &&\n                                    \"tracker-container-running\"}`}\n                            >\n                                <div className=\"distance counter\">\n                                    <div className=\"loading-container\">\n                                        <div className=\"loading\" />\n                                        <div id=\"loading-text\">{distance.toFixed(2)} KM</div>\n                                    </div>\n                                </div>\n                                <div className=\"progress\" />\n                                <div className=\"counter\">{this.format(hour)}</div>\n                                <div className=\"counter\">:</div>\n                                <div className=\"counter\">{this.format(minute)}</div>\n                                <div className=\"counter\">:</div>\n                                <div className=\"counter\">{this.format(second)}</div>\n                                <button className=\"button\" onClick={this.state.handleClick}>\n                                    Toggle\n                                </button>\n                            </main>\n                        </div>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default DistanceTimeTracker;\n"]}]}