{"remainingRequest":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/containers/AddTeam/AddTeamForm.tsx","dependencies":[{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/containers/AddTeam/AddTeamForm.tsx","mtime":1532010673000},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/cache-loader/dist/cjs.js","mtime":1539584369385},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/thread-loader/dist/cjs.js","mtime":1539584369506},{"path":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["/* It's so easy to use \"required\" in TextField but I want to try Formik so that my\n            program can adapt in the future */\nimport * as React from \"react\";\nimport * as Yup from \"yup\";\nimport Button from \"@material-ui/core/Button\";\nimport { withFormik, Form } from \"formik\";\nimport TextField from \"@material-ui/core/es/TextField/TextField\";\nimport \"./AddTeamForm.scss\";\nimport axios from \"~/common/axiosConfigure\";\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props) => {\n    const { values, touched, errors, isSubmitting, handleChange } = props;\n    /* <Form/> is a helper component that helps to save time. It helps to prevent typing out <form onSubmit={props.handleSubmit}/> */\n    return (React.createElement(Form, { className: \"container\", autoComplete: \"off\" },\n        touched.teamName && errors.teamName && React.createElement(\"div\", null, errors.teamName),\n        React.createElement(TextField, { fullWidth: true, name: \"teamName\", label: \"Type a name here!\", defaultValue: values.teamName, className: \"textField\", margin: \"normal\", onChange: handleChange }),\n        React.createElement(\"div\", { style: { textAlign: \"center\" } },\n            React.createElement(Button, { type: \"submit\", disabled: isSubmitting, color: \"primary\" }, \"OK\"),\n            React.createElement(Button, { onClick: props.handleCancelClick, color: \"primary\", autoFocus: true }, \"Cancel\"))));\n};\n// Wrap our form with the using withFormik HoC\nconst AddTeamForm = withFormik({\n    // Transform outer props into form values\n    mapPropsToValues: props => {\n        return {\n            teamName: props.initialTeamName || \"\",\n            userId: props.userId,\n        };\n    },\n    validationSchema: Yup.object().shape({\n        teamName: Yup.string().required(\"Required! ^^\"),\n    }),\n    handleSubmit: (values, { props, setSubmitting }) => {\n        const data = {\n            hostId: values.userId,\n            name: values.teamName,\n        };\n        axios\n            .post(\"/teams/\", data)\n            .then(() => {\n            props.refreshTeams(values.userId);\n            props.handleCancelClick();\n        })\n            .catch(() => {\n            setSubmitting(false);\n        });\n    },\n})(InnerForm);\nexport default AddTeamForm;\n",{"version":3,"file":"/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/containers/AddTeam/AddTeamForm.tsx","sourceRoot":"","sources":["/Users/hthnguyen/Documents/BKFinalProject/sportstracker-fe/src/containers/AddTeam/AddTeamForm.tsx"],"names":[],"mappings":"AAAA;8CAC8C;AAE9C,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,GAAG,MAAM,KAAK,CAAC;AAC3B,OAAO,MAAM,MAAM,0BAA0B,CAAC;AAC9C,OAAO,EAAE,UAAU,EAAe,IAAI,EAAE,MAAM,QAAQ,CAAC;AACvD,OAAO,SAAS,MAAM,0CAA0C,CAAC;AACjE,OAAO,oBAAoB,CAAC;AAC5B,OAAO,KAAK,MAAM,yBAAyB,CAAC;AAY5C,oQAAoQ;AACpQ,MAAM,SAAS,GAAG,CAAC,KAA2C,EAAE,EAAE;IAC9D,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IACtE,iIAAiI;IACjI,OAAO,CACH,oBAAC,IAAI,IAAC,SAAS,EAAC,WAAW,EAAC,YAAY,EAAC,KAAK;QACzC,OAAO,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,iCAAM,MAAM,CAAC,QAAQ,CAAO;QACpE,oBAAC,SAAS,IACN,SAAS,QACT,IAAI,EAAE,UAAU,EAChB,KAAK,EAAC,mBAAmB,EACzB,YAAY,EAAE,MAAM,CAAC,QAAQ,EAC7B,SAAS,EAAC,WAAW,EACrB,MAAM,EAAC,QAAQ,EACf,QAAQ,EAAE,YAAY,GACxB;QACF,6BAAK,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE;YAC/B,oBAAC,MAAM,IAAC,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAC,SAAS,SAEpD;YACT,oBAAC,MAAM,IAAC,OAAO,EAAE,KAAK,CAAC,iBAAiB,EAAE,KAAK,EAAC,SAAS,EAAC,SAAS,mBAE1D,CACP,CACH,CACV,CAAC;AACN,CAAC,CAAC;AASF,8CAA8C;AAC9C,MAAM,WAAW,GAAG,UAAU,CAA0B;IACpD,yCAAyC;IACzC,gBAAgB,EAAE,KAAK,CAAC,EAAE;QACtB,OAAO;YACH,QAAQ,EAAE,KAAK,CAAC,eAAe,IAAI,EAAE;YACrC,MAAM,EAAE,KAAK,CAAC,MAAM;SACvB,CAAC;IACN,CAAC;IACD,gBAAgB,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC;QACjC,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC;KAClD,CAAC;IAEF,YAAY,EAAE,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE;QAC/C,MAAM,IAAI,GAAG;YACT,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,IAAI,EAAE,MAAM,CAAC,QAAQ;SACxB,CAAC;QACF,KAAK;aACA,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC;aACrB,IAAI,CAAC,GAAG,EAAE;YACP,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAClC,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC9B,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,EAAE;YACR,aAAa,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACX,CAAC;CACJ,CAAC,CAAC,SAAS,CAAC,CAAC;AAEd,eAAe,WAAW,CAAC","sourcesContent":["/* It's so easy to use \"required\" in TextField but I want to try Formik so that my\n            program can adapt in the future */\n\nimport * as React from \"react\";\nimport * as Yup from \"yup\";\nimport Button from \"@material-ui/core/Button\";\nimport { withFormik, FormikProps, Form } from \"formik\";\nimport TextField from \"@material-ui/core/es/TextField/TextField\";\nimport \"./AddTeamForm.scss\";\nimport axios from \"~/common/axiosConfigure\";\n// Shape of form values\ninterface FormValues {\n    teamName: string;\n    userId: string;\n}\n\ninterface OtherProps {\n    handleCancelClick: () => void;\n    refreshTeams: (userId: string) => void;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n    const { values, touched, errors, isSubmitting, handleChange } = props;\n    /* <Form/> is a helper component that helps to save time. It helps to prevent typing out <form onSubmit={props.handleSubmit}/> */\n    return (\n        <Form className=\"container\" autoComplete=\"off\">\n            {touched.teamName && errors.teamName && <div>{errors.teamName}</div>}\n            <TextField\n                fullWidth\n                name={\"teamName\"}\n                label=\"Type a name here!\"\n                defaultValue={values.teamName}\n                className=\"textField\"\n                margin=\"normal\"\n                onChange={handleChange}\n            />\n            <div style={{ textAlign: \"center\" }}>\n                <Button type=\"submit\" disabled={isSubmitting} color=\"primary\">\n                    OK\n                </Button>\n                <Button onClick={props.handleCancelClick} color=\"primary\" autoFocus>\n                    Cancel\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\ninterface MyFormProps {\n    initialTeamName?: string;\n    handleCancelClick: () => void;\n    refreshTeams: (userId: string) => void;\n    userId: string;\n}\n\n// Wrap our form with the using withFormik HoC\nconst AddTeamForm = withFormik<MyFormProps, FormValues>({\n    // Transform outer props into form values\n    mapPropsToValues: props => {\n        return {\n            teamName: props.initialTeamName || \"\",\n            userId: props.userId,\n        };\n    },\n    validationSchema: Yup.object().shape({\n        teamName: Yup.string().required(\"Required! ^^\"),\n    }),\n\n    handleSubmit: (values, { props, setSubmitting }) => {\n        const data = {\n            hostId: values.userId,\n            name: values.teamName,\n        };\n        axios\n            .post(\"/teams/\", data)\n            .then(() => {\n                props.refreshTeams(values.userId);\n                props.handleCancelClick();\n            })\n            .catch(() => {\n                setSubmitting(false);\n            });\n    },\n})(InnerForm);\n\nexport default AddTeamForm;\n"]}]}