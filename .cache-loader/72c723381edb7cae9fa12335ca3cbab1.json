{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/data/notification/actions.ts","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/data/notification/actions.ts","mtime":1532508138359},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport actionCreators from \"./actionCreators\";\nimport axios from \"~/common/axiosConfigure\";\n// dto\nexport const fetchNotifications = (id) => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n    dispatch(actionCreators.competitorNotificationFetchRequested());\n    try {\n        const competitions = yield axios\n            .get(process.env.LOCAL_HOST_URL + `/competitionnotification/${id}`)\n            .then(response => response.data);\n        return dispatch(actionCreators.competitorNotificationFetchFulfilled(competitions));\n    }\n    catch (error) {\n        dispatch(actionCreators.competitorNotificationFetchRejected(error));\n    }\n});\n// competition notification\nexport const updateNotifications = (id) => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n    dispatch(actionCreators.competitorNotificationFetchRequested());\n    try {\n        const notifications = yield axios\n            .put(process.env.LOCAL_HOST_URL + `/competitionnotification/${id}`)\n            .then(response => {\n            return response.data;\n        });\n        return dispatch(actionCreators.competitorNotificationFetchFulfilled(notifications));\n    }\n    catch (error) {\n        dispatch(actionCreators.competitorNotificationFetchRejected(error));\n    }\n});\nexport default {\n    fetchNotifications,\n    updateNotifications,\n};\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/data/notification/actions.ts","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/data/notification/actions.ts"],"names":[],"mappings":";AAAA,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,KAAK,MAAM,yBAAyB,CAAC;AAE5C,MAAM;AACN,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,CAAO,QAAa,EAAE,EAAE;IACtE,QAAQ,CAAC,cAAc,CAAC,oCAAoC,EAAE,CAAC,CAAC;IAChE,IAAI;QACA,MAAM,YAAY,GAAG,MAAM,KAAK;aAC3B,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,4BAA4B,EAAE,EAAE,CAAC;aAClE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,QAAQ,CAAC,cAAc,CAAC,oCAAoC,CAAC,YAAY,CAAC,CAAC,CAAC;KACtF;IAAC,OAAO,KAAK,EAAE;QACZ,QAAQ,CAAC,cAAc,CAAC,mCAAmC,CAAC,KAAK,CAAC,CAAC,CAAC;KACvE;AACL,CAAC,CAAA,CAAC;AAEF,2BAA2B;AAC3B,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,CAAO,QAAa,EAAE,EAAE;IACvE,QAAQ,CAAC,cAAc,CAAC,oCAAoC,EAAE,CAAC,CAAC;IAChE,IAAI;QACA,MAAM,aAAa,GAAG,MAAM,KAAK;aAC5B,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,4BAA4B,EAAE,EAAE,CAAC;aAClE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACb,OAAO,QAAQ,CAAC,IAAI,CAAC;QACzB,CAAC,CAAC,CAAC;QACP,OAAO,QAAQ,CAAC,cAAc,CAAC,oCAAoC,CAAC,aAAa,CAAC,CAAC,CAAC;KACvF;IAAC,OAAO,KAAK,EAAE;QACZ,QAAQ,CAAC,cAAc,CAAC,mCAAmC,CAAC,KAAK,CAAC,CAAC,CAAC;KACvE;AACL,CAAC,CAAA,CAAC;AAEF,eAAe;IACX,kBAAkB;IAClB,mBAAmB;CACtB,CAAC","sourcesContent":["import actionCreators from \"./actionCreators\";\nimport axios from \"~/common/axiosConfigure\";\n\n// dto\nexport const fetchNotifications = (id: string) => async (dispatch: any) => {\n    dispatch(actionCreators.competitorNotificationFetchRequested());\n    try {\n        const competitions = await axios\n            .get(process.env.LOCAL_HOST_URL + `/competitionnotification/${id}`)\n            .then(response => response.data);\n        return dispatch(actionCreators.competitorNotificationFetchFulfilled(competitions));\n    } catch (error) {\n        dispatch(actionCreators.competitorNotificationFetchRejected(error));\n    }\n};\n\n// competition notification\nexport const updateNotifications = (id: string) => async (dispatch: any) => {\n    dispatch(actionCreators.competitorNotificationFetchRequested());\n    try {\n        const notifications = await axios\n            .put(process.env.LOCAL_HOST_URL + `/competitionnotification/${id}`)\n            .then(response => {\n                return response.data;\n            });\n        return dispatch(actionCreators.competitorNotificationFetchFulfilled(notifications));\n    } catch (error) {\n        dispatch(actionCreators.competitorNotificationFetchRejected(error));\n    }\n};\n\nexport default {\n    fetchNotifications,\n    updateNotifications,\n};\n"]}]}