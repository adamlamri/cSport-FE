{"remainingRequest":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js??ref--4-oneOf-1-1!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js??ref--4-oneOf-1-2!/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/activity/timer/Timer.tsx","dependencies":[{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/activity/timer/Timer.tsx","mtime":1532682537041},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/cache-loader/dist/cjs.js","mtime":1532011585508},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/thread-loader/dist/cjs.js","mtime":1532011585543},{"path":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["import * as React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport \"./timerStyle.css\";\nimport { isIOS } from \"react-device-detect\";\nvar TimerCSS;\n(function (TimerCSS) {\n    TimerCSS[\"Digit\"] = \"act-tim-digit\";\n    TimerCSS[\"Edit\"] = \"act-tim-digit act-tim-cursor\";\n})(TimerCSS || (TimerCSS = {}));\n// Position Id of the span tag. S or s = sencond. F or f = first\nvar PosID;\n(function (PosID) {\n    PosID[\"HourS\"] = \"sHourId\";\n    PosID[\"HourF\"] = \"fHourId\";\n    PosID[\"MinS\"] = \"sMinId\";\n    PosID[\"MinF\"] = \"fMinId\";\n})(PosID || (PosID = {}));\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleFocus = () => {\n            const timer = document.getElementsByClassName(\"timer-ios\");\n            if (timer.length > 0 && isIOS) {\n                timer[0].className = \"timer-ios\";\n            }\n        };\n        /**\n         * When a time digit span tag was clicked, move the caret position form old one to new one.\n         * If there is no span tag clicked before, caret position will be at fist min postition.\n         */\n        this.handleSpanClick = (evt) => {\n            // Change the CSS\n            const spanTags = document.getElementsByClassName(TimerCSS.Edit);\n            const clickedSpan = evt.target;\n            let pos = 0;\n            if (spanTags.length === 1 && this.state.value !== \"0000\") {\n                spanTags[0].className = TimerCSS.Digit;\n                clickedSpan.className = TimerCSS.Edit;\n                pos = this.getPosition(clickedSpan.id);\n            }\n            else {\n                const fminTag = document.getElementById(PosID.MinF);\n                if (fminTag) {\n                    fminTag.className = TimerCSS.Edit;\n                    pos = this.getPosition(PosID.MinF);\n                }\n            }\n            // Move the caret position\n            this.setCaretPosition(pos);\n        };\n        this.handleChange = (evt) => {\n            const value = evt.target.value.trim();\n            const num4Digits = (\"0000\" + value).slice(-4);\n            if (!isNaN(Number(num4Digits))) {\n                this.setState({ value: num4Digits });\n                this.resetCSS();\n            }\n            if (isIOS) {\n                const timer = document.getElementsByClassName(\"timer-ios\");\n                if (timer.length > 0) {\n                    timer[0].className = \"timer\";\n                }\n            }\n        };\n        this.handleTimerClick = (evt) => {\n            const element = evt.target;\n            if (element.tagName !== \"SPAN\") {\n                this.focusInput();\n            }\n        };\n        this.handleOnBlur = () => {\n            const spanTags = document.getElementsByClassName(TimerCSS.Edit);\n            if (spanTags.length === 1) {\n                spanTags[0].className = TimerCSS.Digit;\n            }\n            this.props.setFieldValue(this.props.id, this.state.value);\n        };\n        this.resetCSS = () => {\n            const spanTags = document.getElementsByClassName(TimerCSS.Edit);\n            if (spanTags.length === 1) {\n                spanTags[0].className = TimerCSS.Digit;\n            }\n            else {\n                const fminTag = document.getElementById(PosID.MinF);\n                if (fminTag) {\n                    fminTag.className = TimerCSS.Edit;\n                }\n            }\n        };\n        this.setCaretPosition = (pos) => {\n            const mInput = document.getElementById(this.props.id);\n            let newPos = mInput.value.length - pos + 1;\n            newPos = newPos > -1 ? newPos : 0;\n            mInput.selectionStart = mInput.selectionEnd = newPos;\n            mInput.focus();\n        };\n        this.getDigit = (posId) => {\n            const position = this.getPosition(posId);\n            return this.state.value.slice(4 - position, 4 - position + 1) || \"0\";\n        };\n        this.getPosition = (posId) => {\n            let pos = 4;\n            switch (posId) {\n                case PosID.MinF:\n                    pos = 1;\n                    break;\n                case PosID.MinS:\n                    pos = 2;\n                    break;\n                case PosID.HourF:\n                    pos = 3;\n                    break;\n                case PosID.HourS:\n                    pos = 4;\n                    break;\n            }\n            return pos;\n        };\n        this.focusInput = () => {\n            const mInput = document.getElementById(this.props.id);\n            mInput.focus();\n        };\n        this.state = { value: this.props.defaultValue };\n    }\n    render() {\n        const { id, error, helperText, label } = this.props;\n        const renderSpan = (id) => {\n            return (React.createElement(\"span\", { onClick: this.handleSpanClick, className: TimerCSS.Digit, id: id }, this.getDigit(id)));\n        };\n        const getInputCSS = () => {\n            let css = \"act-tim-hid-input\";\n            if (isIOS) {\n                css = \"act-tim-hid-input-ios\";\n            }\n            return css;\n        };\n        const getTimerCSS = () => {\n            let css = \"timer\";\n            if (isIOS) {\n                css = \"timer-ios\";\n            }\n            return css;\n        };\n        return (React.createElement(\"div\", { style: { width: \"100%\", marginTop: 36 }, onClick: this.handleTimerClick },\n            React.createElement(\"div\", { className: getTimerCSS() },\n                renderSpan(PosID.HourS),\n                renderSpan(PosID.HourF),\n                React.createElement(\"span\", { className: \"act-tim-sep\" }, \"h\"),\n                renderSpan(PosID.MinS),\n                renderSpan(PosID.MinF),\n                React.createElement(\"span\", { className: \"act-tim-sep\" }, \"m\")),\n            React.createElement(TextField, { id: id, label: label, value: this.state.value, error: error, helperText: helperText, onChange: this.handleChange, onBlur: this.handleOnBlur, onFocus: this.handleFocus, InputLabelProps: {\n                    shrink: true,\n                }, autoComplete: \"off\", className: getInputCSS(), fullWidth: true })));\n    }\n}\nexport default Timer;\n",{"version":3,"file":"/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/activity/timer/Timer.tsx","sourceRoot":"","sources":["/Users/spectre/Desktop/MGM-INTERSHIP/mgmsports-fe/src/containers/activity/timer/Timer.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,SAAS,MAAM,6BAA6B,CAAC;AACpD,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE5C,IAAW,QAGV;AAHD,WAAW,QAAQ;IACf,mCAAuB,CAAA;IACvB,iDAAqC,CAAA;AACzC,CAAC,EAHU,QAAQ,KAAR,QAAQ,QAGlB;AACD,gEAAgE;AAChE,IAAW,KAKV;AALD,WAAW,KAAK;IACZ,0BAAiB,CAAA;IACjB,0BAAiB,CAAA;IACjB,wBAAe,CAAA;IACf,wBAAe,CAAA;AACnB,CAAC,EALU,KAAK,KAAL,KAAK,QAKf;AAcD,WAAY,SAAQ,KAAK,CAAC,SAAiC;IACvD,YAAY,KAAiB;QACzB,KAAK,CAAC,KAAK,CAAC,CAAC;QA4DT,gBAAW,GAAG,GAAS,EAAE;YAC7B,MAAM,KAAK,GAAG,QAAQ,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;YAC3D,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,EAAE;gBAC3B,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,WAAW,CAAC;aACpC;QACL,CAAC,CAAC;QAEF;;;WAGG;QACK,oBAAe,GAAG,CAAC,GAAsC,EAAQ,EAAE;YACvE,iBAAiB;YACjB,MAAM,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAChE,MAAM,WAAW,GAAG,GAAG,CAAC,MAAyB,CAAC;YAClD,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM,EAAE;gBACtD,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC;gBACvC,WAAW,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;gBACtC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAW,CAAC,CAAC;aACnD;iBAAM;gBACH,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACpD,IAAI,OAAO,EAAE;oBACT,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAClC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBACtC;aACJ;YACD,0BAA0B;YAC1B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC,CAAC;QAEM,iBAAY,GAAG,CAAC,GAAwC,EAAQ,EAAE;YACtE,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACtC,MAAM,UAAU,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE;gBAC5B,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;gBACrC,IAAI,CAAC,QAAQ,EAAE,CAAC;aACnB;YACD,IAAI,KAAK,EAAE;gBACP,MAAM,KAAK,GAAG,QAAQ,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;gBAC3D,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;oBAClB,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,OAAO,CAAC;iBAChC;aACJ;QACL,CAAC,CAAC;QAEM,qBAAgB,GAAG,CAAC,GAAkC,EAAQ,EAAE;YACpE,MAAM,OAAO,GAAG,GAAG,CAAC,MAAqB,CAAC;YAC1C,IAAI,OAAO,CAAC,OAAO,KAAK,MAAM,EAAE;gBAC5B,IAAI,CAAC,UAAU,EAAE,CAAC;aACrB;QACL,CAAC,CAAC;QAEM,iBAAY,GAAG,GAAS,EAAE;YAC9B,MAAM,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAChE,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvB,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC;aAC1C;YACD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC,CAAC;QAEM,aAAQ,GAAG,GAAS,EAAE;YAC1B,MAAM,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAChE,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvB,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC;aAC1C;iBAAM;gBACH,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACpD,IAAI,OAAO,EAAE;oBACT,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;iBACrC;aACJ;QACL,CAAC,CAAC;QAEM,qBAAgB,GAAG,CAAC,GAAW,EAAQ,EAAE;YAC7C,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAqB,CAAC;YAC1E,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;YAC3C,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC;YACrD,MAAM,CAAC,KAAK,EAAE,CAAC;QACnB,CAAC,CAAC;QAEM,aAAQ,GAAG,CAAC,KAAY,EAAU,EAAE;YACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACzC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,EAAE,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC;QACzE,CAAC,CAAC;QAEM,gBAAW,GAAG,CAAC,KAAY,EAAU,EAAE;YAC3C,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,QAAQ,KAAK,EAAE;gBACX,KAAK,KAAK,CAAC,IAAI;oBACX,GAAG,GAAG,CAAC,CAAC;oBACR,MAAM;gBACV,KAAK,KAAK,CAAC,IAAI;oBACX,GAAG,GAAG,CAAC,CAAC;oBACR,MAAM;gBACV,KAAK,KAAK,CAAC,KAAK;oBACZ,GAAG,GAAG,CAAC,CAAC;oBACR,MAAM;gBACV,KAAK,KAAK,CAAC,KAAK;oBACZ,GAAG,GAAG,CAAC,CAAC;oBACR,MAAM;aACb;YACD,OAAO,GAAG,CAAC;QACf,CAAC,CAAC;QAEM,eAAU,GAAG,GAAS,EAAE;YAC5B,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAqB,CAAC;YAC1E,MAAM,CAAC,KAAK,EAAE,CAAC;QACnB,CAAC,CAAC;QAvKE,IAAI,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;IACpD,CAAC;IAED,MAAM;QACF,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpD,MAAM,UAAU,GAAG,CAAC,EAAS,EAAe,EAAE;YAC1C,OAAO,CACH,8BAAM,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,SAAS,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,IACjE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CACf,CACV,CAAC;QACN,CAAC,CAAC;QAEF,MAAM,WAAW,GAAG,GAAW,EAAE;YAC7B,IAAI,GAAG,GAAG,mBAAmB,CAAC;YAC9B,IAAI,KAAK,EAAE;gBACP,GAAG,GAAG,uBAAuB,CAAC;aACjC;YACD,OAAO,GAAG,CAAC;QACf,CAAC,CAAC;QAEF,MAAM,WAAW,GAAG,GAAW,EAAE;YAC7B,IAAI,GAAG,GAAG,OAAO,CAAC;YAClB,IAAI,KAAK,EAAE;gBACP,GAAG,GAAG,WAAW,CAAC;aACrB;YACD,OAAO,GAAG,CAAC;QACf,CAAC,CAAC;QAEF,OAAO,CACH,6BAAK,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,gBAAgB;YACxE,6BAAK,SAAS,EAAE,WAAW,EAAE;gBACxB,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC;gBACvB,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC;gBACxB,8BAAM,SAAS,EAAC,aAAa,QAAS;gBACrC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;gBACtB,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;gBACvB,8BAAM,SAAS,EAAC,aAAa,QAAS,CACpC;YACN,oBAAC,SAAS,IACN,EAAE,EAAE,EAAE,EACN,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,KAAK,EAAE,KAAK,EACZ,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,MAAM,EAAE,IAAI,CAAC,YAAY,EACzB,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,eAAe,EAAE;oBACb,MAAM,EAAE,IAAI;iBACf,EACD,YAAY,EAAE,KAAK,EACnB,SAAS,EAAE,WAAW,EAAE,EACxB,SAAS,SACX,CACA,CACT,CAAC;IACN,CAAC;CA+GJ;AAED,eAAe,KAAK,CAAC","sourcesContent":["import * as React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport \"./timerStyle.css\";\nimport { isIOS } from \"react-device-detect\";\n\nconst enum TimerCSS {\n    Digit = \"act-tim-digit\",\n    Edit = \"act-tim-digit act-tim-cursor\",\n}\n// Position Id of the span tag. S or s = sencond. F or f = first\nconst enum PosID {\n    HourS = \"sHourId\",\n    HourF = \"fHourId\",\n    MinS = \"sMinId\",\n    MinF = \"fMinId\",\n}\n\ninterface TimerProps {\n    id: string;\n    defaultValue: string;\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    label?: string;\n    error?: boolean;\n    helperText?: string;\n}\n\ninterface TimerState {\n    value: string;\n}\nclass Timer extends React.Component<TimerProps, TimerState> {\n    constructor(props: TimerProps) {\n        super(props);\n        this.state = { value: this.props.defaultValue };\n    }\n\n    render(): React.ReactNode {\n        const { id, error, helperText, label } = this.props;\n        const renderSpan = (id: PosID): JSX.Element => {\n            return (\n                <span onClick={this.handleSpanClick} className={TimerCSS.Digit} id={id}>\n                    {this.getDigit(id)}\n                </span>\n            );\n        };\n\n        const getInputCSS = (): string => {\n            let css = \"act-tim-hid-input\";\n            if (isIOS) {\n                css = \"act-tim-hid-input-ios\";\n            }\n            return css;\n        };\n\n        const getTimerCSS = (): string => {\n            let css = \"timer\";\n            if (isIOS) {\n                css = \"timer-ios\";\n            }\n            return css;\n        };\n\n        return (\n            <div style={{ width: \"100%\", marginTop: 36 }} onClick={this.handleTimerClick}>\n                <div className={getTimerCSS()}>\n                    {renderSpan(PosID.HourS)}\n                    {renderSpan(PosID.HourF)}\n                    <span className=\"act-tim-sep\">h</span>\n                    {renderSpan(PosID.MinS)}\n                    {renderSpan(PosID.MinF)}\n                    <span className=\"act-tim-sep\">m</span>\n                </div>\n                <TextField\n                    id={id}\n                    label={label}\n                    value={this.state.value}\n                    error={error}\n                    helperText={helperText}\n                    onChange={this.handleChange}\n                    onBlur={this.handleOnBlur}\n                    onFocus={this.handleFocus}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    autoComplete={\"off\"}\n                    className={getInputCSS()}\n                    fullWidth\n                />\n            </div>\n        );\n    }\n\n    private handleFocus = (): void => {\n        const timer = document.getElementsByClassName(\"timer-ios\");\n        if (timer.length > 0 && isIOS) {\n            timer[0].className = \"timer-ios\";\n        }\n    };\n\n    /**\n     * When a time digit span tag was clicked, move the caret position form old one to new one.\n     * If there is no span tag clicked before, caret position will be at fist min postition.\n     */\n    private handleSpanClick = (evt: React.MouseEvent<HTMLSpanElement>): void => {\n        // Change the CSS\n        const spanTags = document.getElementsByClassName(TimerCSS.Edit);\n        const clickedSpan = evt.target as HTMLSpanElement;\n        let pos = 0;\n        if (spanTags.length === 1 && this.state.value !== \"0000\") {\n            spanTags[0].className = TimerCSS.Digit;\n            clickedSpan.className = TimerCSS.Edit;\n            pos = this.getPosition(clickedSpan.id as PosID);\n        } else {\n            const fminTag = document.getElementById(PosID.MinF);\n            if (fminTag) {\n                fminTag.className = TimerCSS.Edit;\n                pos = this.getPosition(PosID.MinF);\n            }\n        }\n        // Move the caret position\n        this.setCaretPosition(pos);\n    };\n\n    private handleChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = evt.target.value.trim();\n        const num4Digits = (\"0000\" + value).slice(-4);\n        if (!isNaN(Number(num4Digits))) {\n            this.setState({ value: num4Digits });\n            this.resetCSS();\n        }\n        if (isIOS) {\n            const timer = document.getElementsByClassName(\"timer-ios\");\n            if (timer.length > 0) {\n                timer[0].className = \"timer\";\n            }\n        }\n    };\n\n    private handleTimerClick = (evt: React.MouseEvent<HTMLElement>): void => {\n        const element = evt.target as HTMLElement;\n        if (element.tagName !== \"SPAN\") {\n            this.focusInput();\n        }\n    };\n\n    private handleOnBlur = (): void => {\n        const spanTags = document.getElementsByClassName(TimerCSS.Edit);\n        if (spanTags.length === 1) {\n            spanTags[0].className = TimerCSS.Digit;\n        }\n        this.props.setFieldValue(this.props.id, this.state.value);\n    };\n\n    private resetCSS = (): void => {\n        const spanTags = document.getElementsByClassName(TimerCSS.Edit);\n        if (spanTags.length === 1) {\n            spanTags[0].className = TimerCSS.Digit;\n        } else {\n            const fminTag = document.getElementById(PosID.MinF);\n            if (fminTag) {\n                fminTag.className = TimerCSS.Edit;\n            }\n        }\n    };\n\n    private setCaretPosition = (pos: number): void => {\n        const mInput = document.getElementById(this.props.id) as HTMLInputElement;\n        let newPos = mInput.value.length - pos + 1;\n        newPos = newPos > -1 ? newPos : 0;\n        mInput.selectionStart = mInput.selectionEnd = newPos;\n        mInput.focus();\n    };\n\n    private getDigit = (posId: PosID): string => {\n        const position = this.getPosition(posId);\n        return this.state.value.slice(4 - position, 4 - position + 1) || \"0\";\n    };\n\n    private getPosition = (posId: PosID): number => {\n        let pos = 4;\n        switch (posId) {\n            case PosID.MinF:\n                pos = 1;\n                break;\n            case PosID.MinS:\n                pos = 2;\n                break;\n            case PosID.HourF:\n                pos = 3;\n                break;\n            case PosID.HourS:\n                pos = 4;\n                break;\n        }\n        return pos;\n    };\n\n    private focusInput = (): void => {\n        const mInput = document.getElementById(this.props.id) as HTMLInputElement;\n        mInput.focus();\n    };\n}\n\nexport default Timer;\n"]}]}